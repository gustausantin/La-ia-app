-- üí£ SCRIPT NUCLEAR REAL - BASADO EN TUS TABLAS REALES
-- ‚ö†Ô∏è ELIMINA TODO DE TODAS LAS TABLAS QUE REALMENTE EXISTEN

CREATE OR REPLACE FUNCTION real_nuclear_cleanup()
RETURNS TEXT AS $$
DECLARE
    cleanup_result TEXT := '';
    row_count INTEGER;
    total_deleted INTEGER := 0;
BEGIN
    cleanup_result := 'üí£ LIMPIEZA NUCLEAR REAL - TODAS LAS TABLAS' || E'\n' || E'\n';
    
    -- DESACTIVAR RLS TEMPORALMENTE
    SET row_security = off;
    
    -- TRUNCATE es m√°s r√°pido y seguro que DELETE para limpiar completamente
    -- ORDEN: de m√°s dependientes a menos dependientes
    
    -- 1. Tablas de agent (las que vi en tu pantalla)
    BEGIN
        TRUNCATE TABLE public.agent_conversations RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'ü§ñ agent_conversations: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.agent_conversations;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'ü§ñ agent_conversations: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.agent_insights RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üß† agent_insights: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.agent_insights;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üß† agent_insights: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.agent_metrics RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üìä agent_metrics: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.agent_metrics;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üìä agent_metrics: ' || row_count || ' deleted' || E'\n';
    END;
    
    -- 2. Channel y conversation analytics
    BEGIN
        TRUNCATE TABLE public.channel_performance RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üìà channel_performance: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.channel_performance;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üìà channel_performance: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.conversation_analytics RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üó®Ô∏è conversation_analytics: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.conversation_analytics;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üó®Ô∏è conversation_analytics: ' || row_count || ' deleted' || E'\n';
    END;
    
    -- 3. Todas las dem√°s tablas que vi en tu interfaz
    BEGIN
        TRUNCATE TABLE public.notifications RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üîî notifications: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.notifications;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üîî notifications: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.messages RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üí¨ messages: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.messages;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üí¨ messages: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.conversations RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üó®Ô∏è conversations: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.conversations;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üó®Ô∏è conversations: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.message_templates RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üìù message_templates: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.message_templates;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üìù message_templates: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.analytics RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üìä analytics: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.analytics;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üìä analytics: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.analytics_historical RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üìà analytics_historical: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.analytics_historical;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üìà analytics_historical: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.daily_metrics RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üìÖ daily_metrics: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.daily_metrics;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üìÖ daily_metrics: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.inventory_items RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üì¶ inventory_items: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.inventory_items;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üì¶ inventory_items: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.inventory RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üìã inventory: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.inventory;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üìã inventory: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.staff RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üë®‚Äçüíº staff: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.staff;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üë®‚Äçüíº staff: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.restaurant_settings RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || '‚öôÔ∏è restaurant_settings: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.restaurant_settings;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || '‚öôÔ∏è restaurant_settings: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.restaurant_business_config RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üè™ restaurant_business_config: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.restaurant_business_config;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üè™ restaurant_business_config: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.reservations RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üìÖ reservations: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.reservations;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üìÖ reservations: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.reservations_with_customer RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üìÖ reservations_with_customer: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.reservations_with_customer;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üìÖ reservations_with_customer: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.customers RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üë§ customers: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.customers;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üë§ customers: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.tables RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'ü™ë tables: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.tables;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'ü™ë tables: ' || row_count || ' deleted' || E'\n';
    END;
    
    -- CR√çTICO: User mapping y profiles
    BEGIN
        TRUNCATE TABLE public.user_restaurant_mapping RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üîó user_restaurant_mapping: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.user_restaurant_mapping;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üîó user_restaurant_mapping: ' || row_count || ' deleted' || E'\n';
    END;
    
    BEGIN
        TRUNCATE TABLE public.profiles RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üë§ profiles: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.profiles;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üë§ profiles: ' || row_count || ' deleted' || E'\n';
    END;
    
    -- FINAL: Restaurants (la tabla principal)
    BEGIN
        TRUNCATE TABLE public.restaurants RESTART IDENTITY CASCADE;
        cleanup_result := cleanup_result || 'üè¢ restaurants: TRUNCATED' || E'\n';
    EXCEPTION WHEN OTHERS THEN
        DELETE FROM public.restaurants;
        GET DIAGNOSTICS row_count = ROW_COUNT;
        cleanup_result := cleanup_result || 'üè¢ restaurants: ' || row_count || ' deleted' || E'\n';
    END;
    
    -- REACTIVAR RLS
    SET row_security = on;
    
    cleanup_result := cleanup_result || E'\n';
    cleanup_result := cleanup_result || 'üí• LIMPIEZA NUCLEAR COMPLETADA' || E'\n';
    cleanup_result := cleanup_result || 'üßπ TODAS LAS TABLAS EST√ÅN COMPLETAMENTE VAC√çAS' || E'\n';
    cleanup_result := cleanup_result || '‚úÖ LISTO PARA REGISTRAR NUEVOS USUARIOS' || E'\n';
    
    RETURN cleanup_result;
    
EXCEPTION WHEN OTHERS THEN
    SET row_security = on;
    RETURN '‚ùå ERROR: ' || SQLERRM;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- EJECUTAR ESTE:
-- SELECT real_nuclear_cleanup();
