-- üõ°Ô∏è SOLUCI√ìN ENTERPRISE: POL√çTICAS RLS CORRECTAS SIN RECURSI√ìN
-- Problema: recursi√≥n infinita entre user_restaurant_mapping y restaurants
-- Soluci√≥n: pol√≠ticas independientes y bien estructuradas

-- 1. ELIMINAR POL√çTICAS PROBLEM√ÅTICAS
SELECT 'Eliminando pol√≠ticas con recursi√≥n infinita...' as status;

DROP POLICY IF EXISTS "user_restaurant_mapping_policy_simple" ON public.user_restaurant_mapping;
DROP POLICY IF EXISTS "restaurants_policy_simple" ON public.restaurants;
DROP POLICY IF EXISTS "reservations_select_policy" ON public.reservations;
DROP POLICY IF EXISTS "user_mapping_simple" ON public.user_restaurant_mapping;
DROP POLICY IF EXISTS "restaurants_simple" ON public.restaurants;
DROP POLICY IF EXISTS "reservations_simple" ON public.reservations;

-- 2. CREAR POL√çTICAS ENTERPRISE CORRECTAS

-- POL√çTICA PARA user_restaurant_mapping (BASE - SIN DEPENDENCIAS)
-- Esta tabla es la base, solo verifica el usuario autenticado
CREATE POLICY "user_restaurant_mapping_enterprise" ON public.user_restaurant_mapping
    FOR ALL
    USING (auth_user_id = auth.uid())
    WITH CHECK (auth_user_id = auth.uid());

-- POL√çTICA PARA restaurants (DEPENDE DIRECTAMENTE DE AUTH, NO DE MAPPINGS)
-- En lugar de usar user_restaurant_mapping, usamos el owner_id directamente
-- Asumiendo que restaurants tiene owner_id que mapea a auth.uid()
CREATE POLICY "restaurants_enterprise" ON public.restaurants
    FOR ALL
    USING (
        -- El usuario puede ver restaurants donde es propietario
        -- O usar email para verificar propiedad (m√°s simple y sin recursi√≥n)
        email = (SELECT email FROM auth.users WHERE id = auth.uid())
    );

-- POL√çTICA PARA reservations (DEPENDE DIRECTAMENTE DE RESTAURANT_ID)
-- En lugar de consultar mappings, usamos una subconsulta directa
CREATE POLICY "reservations_enterprise" ON public.reservations
    FOR ALL
    USING (
        -- El usuario puede ver reservas de restaurantes que le pertenecen
        restaurant_id IN (
            SELECT id FROM public.restaurants 
            WHERE email = (SELECT email FROM auth.users WHERE id = auth.uid())
        )
    );

-- 3. CREAR POL√çTICAS ADICIONALES PARA OTRAS TABLAS IMPORTANTES

-- POL√çTICA PARA profiles
DROP POLICY IF EXISTS "profiles_policy" ON public.profiles;
CREATE POLICY "profiles_enterprise" ON public.profiles
    FOR ALL
    USING (id = auth.uid())
    WITH CHECK (id = auth.uid());

-- POL√çTICA PARA customers
DROP POLICY IF EXISTS "customers_policy" ON public.customers;
CREATE POLICY "customers_enterprise" ON public.customers
    FOR ALL
    USING (
        restaurant_id IN (
            SELECT id FROM public.restaurants 
            WHERE email = (SELECT email FROM auth.users WHERE id = auth.uid())
        )
    );

-- POL√çTICA PARA tables
DROP POLICY IF EXISTS "tables_policy" ON public.tables;
CREATE POLICY "tables_enterprise" ON public.tables
    FOR ALL
    USING (
        restaurant_id IN (
            SELECT id FROM public.restaurants 
            WHERE email = (SELECT email FROM auth.users WHERE id = auth.uid())
        )
    );

-- 4. VERIFICAR QUE LAS POL√çTICAS NO TIENEN RECURSI√ìN
SELECT 'Verificando pol√≠ticas enterprise...' as status;

-- Listar todas las pol√≠ticas activas
SELECT 
    schemaname,
    tablename, 
    policyname,
    cmd,
    CASE 
        WHEN qual LIKE '%user_restaurant_mapping%' AND tablename != 'user_restaurant_mapping' 
        THEN '‚ö†Ô∏è POSIBLE RECURSI√ìN'
        ELSE '‚úÖ OK'
    END as recursion_check
FROM pg_policies 
WHERE schemaname = 'public' 
AND tablename IN ('user_restaurant_mapping', 'restaurants', 'reservations', 'profiles', 'customers', 'tables')
ORDER BY tablename, policyname;

-- 5. VERIFICAR QUE RLS EST√Å HABILITADO
SELECT 
    tablename,
    rowsecurity as rls_enabled
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('user_restaurant_mapping', 'restaurants', 'reservations', 'profiles', 'customers', 'tables');

-- 6. RESULTADO FINAL
SELECT 'POL√çTICAS RLS ENTERPRISE CONFIGURADAS SIN RECURSI√ìN' as final_status;
