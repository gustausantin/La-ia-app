Paso 8B — Pega este bloque en src/contexts/AuthContext.jsx
(Sustituye tu lógica actual de carga/creación de restaurante por este híbrido robusto.)

jsx
Copiar
Editar
// src/contexts/AuthContext.jsx
import { supabase } from "../lib/supabase";

/** Intenta algo con reintentos exponenciales (red/latencia) */
async function withRetry(fn, { tries = 3, baseMs = 300 } = {}) {
  let lastErr;
  for (let i = 0; i < tries; i++) {
    try { return await fn(); } catch (err) {
      lastErr = err;
      await new Promise(r => setTimeout(r, baseMs * Math.pow(2, i)));
    }
  }
  throw lastErr;
}

/** Lee el mapping (usa auth_user_id) y devuelve el restaurante o null */
async function loadUserRestaurant(authUserId) {
  if (!authUserId) return null;

  const { data, error } = await supabase
    .from("user_restaurant_mapping")
    .select(`
      role,
      permissions,
      restaurant:restaurant_id (*)
    `)
    .eq("auth_user_id", authUserId)
    .single();

  // PGRST116 = no rows (PostgREST)
  if (error && error.code === "PGRST116") return null;
  if (error) throw error;

  return data?.restaurant || null;
}

/** Crea (en el servidor) un restaurante por defecto para el usuario actual */
async function ensureRestaurantForCurrentUser(name = "Mi Restaurante") {
  const { data, error } = await supabase.rpc("create_restaurant_for_current_user", {
    p_name: name,
  });
  if (error) throw error;
  // data = { status: 'created'|'exists', restaurant: {...} }
  return data?.restaurant ?? null;
}

/** Inicializa sesión + restaurante con fallback y reintentos */
export async function initSession() {
  // 1) Usuario autenticado
  const { data: authData, error: authErr } = await supabase.auth.getUser();
  if (authErr) throw authErr;
  const user = authData?.user ?? null;
  if (!user?.id) return { user: null, restaurant: null };

  // 2) Intentar leer restaurante existente
  let restaurant = await withRetry(() => loadUserRestaurant(user.id));

  // 3) Si no existe, crearlo vía RPC (transacción segura en DB)
  if (!restaurant) {
    restaurant = await withRetry(() => ensureRestaurantForCurrentUser("Mi Restaurante"));
  }

  return { user, restaurant };
}
Qué hace:

Usa auth_user_id (no user_id).

Si no hay restaurante, lo crea en Supabase con la RPC que ya definiste.

Incluye reintentos y manejo de “no rows” (PGRST116).