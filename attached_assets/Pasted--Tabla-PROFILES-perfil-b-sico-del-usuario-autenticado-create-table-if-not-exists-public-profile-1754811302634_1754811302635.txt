-- Tabla PROFILES (perfil básico del usuario autenticado)
create table if not exists public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  email text unique,
  full_name text,
  phone text,
  avatar_url text,
  default_restaurant_id uuid references public.restaurants(id) on delete set null,
  metadata jsonb default '{}'::jsonb,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Índices útiles
create index if not exists idx_profiles_email on public.profiles(email);
create index if not exists idx_profiles_default_restaurant on public.profiles(default_restaurant_id);

-- Trigger para updated_at
create or replace function public.set_updated_at() returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

drop trigger if exists trg_profiles_updated_at on public.profiles;
create trigger trg_profiles_updated_at
  before update on public.profiles
  for each row execute function public.set_updated_at();

-- RLS
alter table public.profiles enable row level security;

-- Cada usuario puede ver su propio perfil
create policy "profiles_select_own"
on public.profiles for select
using (id = auth.uid());

-- (Opcional) Ver perfiles de compañeros del mismo restaurante (útil para la pestaña Equipo)
create policy "profiles_select_same_restaurant"
on public.profiles for select
using (
  exists (
    select 1
    from public.user_restaurant_mapping m1
    join public.user_restaurant_mapping m2
      on m1.restaurant_id = m2.restaurant_id
    where m1.auth_user_id = auth.uid()
      and m2.auth_user_id = profiles.id
  )
);

-- Actualizar SOLO tu propio perfil
create policy "profiles_update_own"
on public.profiles for update
using (id = auth.uid())
with check (id = auth.uid());

-- Insertar perfiles solo por trigger/servicio (los usuarios normales no insertan directamente)
create policy "profiles_insert_service_only"
on public.profiles for insert
to service_role
with check (true);

-- Crear perfil automáticamente cuando se crea un usuario en auth.users
create or replace function public.handle_new_user() returns trigger as $$
begin
  insert into public.profiles (id, email, full_name, avatar_url)
  values (
    new.id,
    new.email,
    coalesce(new.raw_user_meta_data->>'full_name', ''),
    new.raw_user_meta_data->>'avatar_url'
  )
  on conflict (id) do nothing;
  return new;
end;
$$ language plpgsql security definer;

drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute function public.handle_new_user();
