Paso 9 — Dejar una sola initSession en AuthContext.jsx
Abre src/contexts/AuthContext.jsx.

Borra cualquier versión antigua de initSession, loadUserRestaurant, ensureRestaurantForCurrentUser y withRetry.

Copia/pega este bloque (sustituye lo que tengas):

jsx
Copiar
Editar
// src/contexts/AuthContext.jsx
import { supabase } from "../lib/supabase";

/** Reintentos simples */
async function withRetry(fn, { tries = 3, baseMs = 300 } = {}) {
  let lastErr;
  for (let i = 0; i < tries; i++) {
    try { return await fn(); } catch (err) {
      lastErr = err;
      await new Promise(r => setTimeout(r, baseMs * (2 ** i)));
    }
  }
  throw lastErr;
}

/** Lee mapping por auth_user_id y devuelve restaurante o null */
async function loadUserRestaurant(authUserId) {
  if (!authUserId) return null;
  const { data, error } = await supabase
    .from("user_restaurant_mapping")
    .select(`
      role,
      permissions,
      restaurant:restaurant_id (*)
    `)
    .eq("auth_user_id", authUserId)
    .single();

  // PGRST116 = sin filas
  if (error && error.code === "PGRST116") return null;
  if (error) throw error;
  return data?.restaurant ?? null;
}

/** Crea restaurante por defecto en el servidor (RPC) */
async function ensureRestaurantForCurrentUser(name = "Mi Restaurante") {
  const { data, error } = await supabase.rpc("create_restaurant_for_current_user", {
    p_name: name,
  });
  if (error) throw error;
  return data?.restaurant ?? null;
}

/** ÚNICA función pública de inicialización */
export async function initSession() {
  const { data: authData, error: authErr } = await supabase.auth.getUser();
  if (authErr) throw authErr;
  const user = authData?.user ?? null;
  if (!user?.id) return { user: null, restaurant: null };

  let restaurant = await withRetry(() => loadUserRestaurant(user.id));
  if (!restaurant) {
    restaurant = await withRetry(() => ensureRestaurantForCurrentUser("Mi Restaurante"));
  }
  return { user, restaurant };
}
Guarda y pulsa Run.

Ignora los MaxListeners/WebGL de Replit (son warnings del IDE).