{
  "nodes": [
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"date\": \"2025-10-19\",\n  \"time\": \"20:00\",\n  \"party_size\": 4,\n  \"preferred_zone\": \"terraza\",\n  \"restaurant_id\": \"d6b63130-1ebf-4284-98fc-a3b31a85d9d1\"\n}"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -800,
        128
      ],
      "id": "88646c4c-73f8-4377-9621-8cc3783c4c37",
      "name": "Start",
      "notes": "✅ Acepta preferred_zone (opcional)"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "restaurants",
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.restaurant_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -624,
        128
      ],
      "id": "new-restaurant-node",
      "name": "🏪 Obtener Restaurant Settings",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      },
      "notes": "✅ NUEVO: Obtiene settings.zones para validar"
    },
    {
      "parameters": {
        "jsCode": "// =====================================================\n// 🔍 VALIDACIÓN DE INPUT CON VALIDACIÓN DE ZONAS\n// =====================================================\n\nconst input = $input.first().json;\nconst restaurant = $('🏪 Obtener Restaurant Settings').first().json;\n\nconsole.log('📥 Input recibido:', input);\n\n// ===== VALIDAR FECHA =====\nconst fecha = input.date || input.reservation_date || '';\n\nif (!fecha || !/^\\d{4}-\\d{2}-\\d{2}$/.test(fecha)) {\n  throw new Error('Formato de fecha inválido. Se requiere YYYY-MM-DD');\n}\n\nconst hoy = new Date().toISOString().split('T')[0];\nif (fecha < hoy) {\n  throw new Error('No se puede consultar disponibilidad en fechas pasadas');\n}\n\n// ===== VALIDAR HORA =====\nconst hora = input.time || input.reservation_time || '';\n\nif (!hora || !/^\\d{2}:\\d{2}(:\\d{2})?$/.test(hora)) {\n  throw new Error('Formato de hora inválido. Se requiere HH:MM');\n}\n\nconst horaNormalizada = hora.substring(0, 5);\n\n// ===== VALIDAR PERSONAS =====\nconst personas = parseInt(input.party_size || input.people || 0);\n\nif (!personas || personas < 1 || personas > 20) {\n  throw new Error('Número de personas debe estar entre 1 y 20');\n}\n\n// ===== VALIDAR RESTAURANT_ID =====\nconst restaurant_id = input.restaurant_id || '';\n\nif (!restaurant_id) {\n  throw new Error('restaurant_id es obligatorio');\n}\n\n// ✅✅✅ NUEVA VALIDACIÓN DE ZONAS\nconst zonesConfig = restaurant.settings?.zones || {};\nconst availableZones = [];\n\n// Extraer zonas activas\nObject.entries(zonesConfig).forEach(([zoneKey, zoneData]) => {\n  if (zoneData && zoneData.enabled === true) {\n    availableZones.push(zoneKey);\n  }\n});\n\nconsole.log('🗺️ Zonas activas del restaurante:', availableZones);\n\n// ✅ VALIDAR Y NORMALIZAR ZONA\nconst zonaRaw = input.preferred_zone || input.zone || input.reservation_location || input.location || null;\nlet zona = null;\nlet zonaValidada = false;\n\nif (zonaRaw) {\n  const zonaNormalizada = zonaRaw.toLowerCase().trim();\n  \n  // Si es \"any\", buscar en todas las zonas activas\n  if (zonaNormalizada === 'any') {\n    zona = null;\n    zonaValidada = true;\n    console.log('✅ Zona: \"any\" - Se buscará en todas las zonas activas');\n  } \n  // Validar que la zona esté en las zonas activas\n  else if (availableZones.includes(zonaNormalizada)) {\n    zona = zonaNormalizada;\n    zonaValidada = true;\n    console.log(`✅ Zona válida y activa: ${zona}`);\n  } \n  // Zona no está activa o no existe\n  else {\n    console.log(`⚠️ Zona \"${zonaRaw}\" no está activa o no existe. Zonas disponibles: ${availableZones.join(', ')}`);\n    // Buscar en todas las zonas activas como fallback\n    zona = null;\n    zonaValidada = true;\n    console.log('ℹ️ Buscando en todas las zonas activas como alternativa');\n  }\n} else {\n  // Si no especificó zona, buscar en todas las activas\n  zona = null;\n  zonaValidada = true;\n  console.log('ℹ️ No se especificó zona, se buscará en todas las zonas activas');\n}\n\nconsole.log('✅ Validado:', { fecha, hora: horaNormalizada, personas, zona: zona || 'todas las activas', restaurant_id });\n\nreturn {\n  fecha,\n  hora: horaNormalizada,\n  personas,\n  zona,\n  zona_solicitada_original: zonaRaw,\n  zonas_disponibles: availableZones,\n  restaurant_id,\n  fecha_formateada: new Date(fecha).toLocaleDateString('es-ES', { \n    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' \n  })\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        128
      ],
      "id": "e4ef71f2-82fa-4738-9e76-26c8165bcfd0",
      "name": "🔍 Validar Input + Zonas",
      "notes": "✅ ACTUALIZADO: Valida que la zona esté activa"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "availability_slots",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "restaurant_id",
              "condition": "eq",
              "keyValue": "={{ $json.restaurant_id }}"
            },
            {
              "keyName": "slot_date",
              "condition": "eq",
              "keyValue": "={{ $json.fecha }}"
            },
            {
              "keyName": "status",
              "condition": "eq",
              "keyValue": "free"
            },
            {
              "keyName": "start_time",
              "condition": "eq",
              "keyValue": "={{ $json.hora }}"
            },
            {
              "keyName": "zone",
              "condition": "eq",
              "keyValue": "={{ $json.zona }}"
            },
            {
              "keyName": "capacity",
              "condition": "gte",
              "keyValue": "={{ $json.personas }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -256,
        128
      ],
      "id": "ed63d37e-9a73-4dde-9476-0cda4db9414c",
      "name": "📍 Buscar Slots Disponibles",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      },
      "continueOnFail": true,
      "notes": "✅ Busca en zona validada o todas las activas"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "tiene-slots",
              "leftValue": "={{ $json.is_available }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -64,
        128
      ],
      "id": "cc4e1b84-6f83-4b64-96a3-aa2017255066",
      "name": "❓ ¿Hay Slots?",
      "notes": "Bifurcación: Disponible vs No disponible"
    },
    {
      "parameters": {
        "jsCode": "// =====================================================\n// ✅ RESPUESTA: SÍ HAY DISPONIBILIDAD (CON ZONAS)\n// =====================================================\n\nconst validacion = $('🔍 Validar Input + Zonas').first().json;\nconst slots = $input.all();\n\nconst personas = validacion.personas;\nconst zona = validacion.zona;\nconst zonasDisponibles = validacion.zonas_disponibles;\n\nconsole.log('✅ Slots disponibles:', slots.length);\n\nif (slots.length === 0) {\n  const mensajeBase = `Lo siento, no tenemos mesas con capacidad suficiente para ${personas} personas`;\n  const mensajeZona = zona ? ` en la zona ${zona}` : '';\n  const sugerenciaZonas = zonasDisponibles.length > 1 ? ` Zonas disponibles: ${zonasDisponibles.join(', ')}. ¿Te iría bien otra zona?` : '';\n  \n  return {\n    disponible: false,\n    mensaje: `${mensajeBase}${mensajeZona}.${sugerenciaZonas}`,\n    alternativas: [],\n    detalles: {\n      fecha: validacion.fecha,\n      hora: validacion.hora,\n      personas: personas,\n      zona_solicitada: zona,\n      zonas_disponibles: zonasDisponibles\n    },\n    accion_sugerida: zonasDisponibles.length > 1 ? 'sugerir_otra_zona' : 'buscar_otra_hora'\n  };\n}\n\nconst mesasDisponibles = slots\n  .map(s => s.json)\n  .sort((a, b) => a.capacity - b.capacity);\n\nconst mejorMesa = mesasDisponibles[0];\n\nconst mensajeZona = zona ? ` en ${zona}` : '';\nconst mensaje = `¡Perfecto! Sí tenemos disponibilidad${mensajeZona} para ${personas} persona${personas > 1 ? 's' : ''} el ${validacion.fecha_formateada} a las ${validacion.hora}. Tenemos ${mesasDisponibles.length} mesa${mesasDisponibles.length > 1 ? 's' : ''} disponible${mesasDisponibles.length > 1 ? 's' : ''}.`;\n\nreturn {\n  disponible: true,\n  mensaje: mensaje,\n  detalles: {\n    fecha: validacion.fecha,\n    hora: validacion.hora,\n    personas: personas,\n    zona_solicitada: zona,\n    zonas_disponibles: zonasDisponibles,\n    mesas_disponibles: mesasDisponibles.length,\n    mejor_opcion: {\n      mesa: mejorMesa.table_name,\n      capacidad: mejorMesa.capacity,\n      zona: mejorMesa.zone\n    },\n    todas_las_opciones: mesasDisponibles.map(m => ({\n      mesa: m.table_name,\n      capacidad: m.capacity,\n      zona: m.zone\n    }))\n  },\n  accion_sugerida: 'proceder_con_reserva'\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        112,
        32
      ],
      "id": "a4edc489-02b9-49b5-8e8a-e5ddc9858d1e",
      "name": "✅ Respuesta: Disponible",
      "notes": "✅ Incluye zonas disponibles en respuesta"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "availability_slots",
        "limit": 200,
        "filters": {
          "conditions": [
            {
              "keyName": "restaurant_id",
              "condition": "eq",
              "keyValue": "={{ $('🔍 Validar Input + Zonas').item.json.restaurant_id }}"
            },
            {
              "keyName": "slot_date",
              "condition": "eq",
              "keyValue": "={{ $('🔍 Validar Input + Zonas').item.json.fecha }}"
            },
            {
              "keyName": "status",
              "condition": "eq",
              "keyValue": "free"
            },
            {
              "keyName": "is_available",
              "condition": "eq",
              "keyValue": "true"
            },
            {
              "keyName": "capacity",
              "condition": "gte",
              "keyValue": "={{ $('🔍 Validar Input + Zonas').item.json.personas }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        112,
        208
      ],
      "id": "b743561b-ac6d-4380-95d4-76032d222a9e",
      "name": "🔎 Buscar Alternativas",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      },
      "continueOnFail": true,
      "notes": "Busca en TODAS las zonas activas para alternativas"
    },
    {
      "parameters": {
        "jsCode": "// =====================================================\n// ⚠️ RESPUESTA: NO HAY DISPONIBILIDAD (CON ZONAS)\n// =====================================================\n\nconst validacion = $('🔍 Validar Input + Zonas').first().json;\nconst alternativas = $input.all();\n\nconst zona = validacion.zona;\nconst personas = validacion.personas;\nconst zonasDisponibles = validacion.zonas_disponibles;\n\nconsole.log('🔍 Alternativas encontradas:', alternativas.length);\nconsole.log('🗺️ Zonas disponibles del restaurante:', zonasDisponibles);\n\n// ===== CASO 1: NO HAY ALTERNATIVAS EN TODO EL DÍA =====\nif (alternativas.length === 0) {\n  return {\n    tiene_alternativas: false,\n    mensaje: `Lo siento, no tenemos disponibilidad para ${personas} personas el ${validacion.fecha_formateada}. ¿Te gustaría que busque en otra fecha?`,\n    disponible: false,\n    alternativas: [],\n    detalles: {\n      fecha_solicitada: validacion.fecha,\n      hora_solicitada: validacion.hora,\n      personas: personas,\n      zona_solicitada: zona,\n      zonas_disponibles: zonasDisponibles\n    },\n    accion_sugerida: 'sugerir_otra_fecha'\n  };\n}\n\n// ===== CASO 2: HAY SLOTS EN OTRAS ZONAS ACTIVAS =====\nif (zona) {\n  // Filtrar solo las zonas activas\n  const zonasAlternativas = [...new Set(\n    alternativas\n      .map(s => s.json.zone)\n      .filter(z => z && z !== zona && zonasDisponibles.includes(z))\n  )];\n  \n  if (zonasAlternativas.length > 0) {\n    const listaZonas = zonasAlternativas.join(', ');\n    return {\n      tiene_alternativas: true,\n      disponible: false,\n      mensaje: `Lo siento, no tenemos disponibilidad en ${zona} a las ${validacion.hora} para ${personas} personas. Sin embargo, sí tenemos disponibilidad en: ${listaZonas}. ¿Te iría bien alguna de estas zonas?`,\n      alternativas_zona: zonasAlternativas,\n      detalles: {\n        fecha: validacion.fecha,\n        hora_solicitada: validacion.hora,\n        personas: personas,\n        zona_solicitada: zona,\n        zonas_alternativas: zonasAlternativas,\n        todas_zonas_disponibles: zonasDisponibles\n      },\n      accion_sugerida: 'elegir_otra_zona'\n    };\n  }\n}\n\n// ===== CASO 3: HAY SLOTS EN OTRAS HORAS (SOLO ZONAS ACTIVAS) =====\nconst horasPorSlot = {};\nalternativas.forEach(slot => {\n  const hora = slot.json.start_time;\n  const zonaSlot = slot.json.zone;\n  \n  // Solo considerar zonas activas\n  if (!zonasDisponibles.includes(zonaSlot)) {\n    return;\n  }\n  \n  // Si especificó zona, solo esa zona\n  if (zona && zonaSlot !== zona) {\n    return;\n  }\n  \n  if (!horasPorSlot[hora]) {\n    horasPorSlot[hora] = {\n      slots: 0,\n      capacity_total: 0\n    };\n  }\n  horasPorSlot[hora].slots++;\n  horasPorSlot[hora].capacity_total += slot.json.capacity;\n});\n\nconst horasDisponibles = Object.keys(horasPorSlot)\n  .filter(h => h !== validacion.hora)\n  .sort()\n  .slice(0, 5);\n\nif (horasDisponibles.length === 0) {\n  const mensajeZona = zona ? ` en ${zona}` : '';\n  const sugerenciaZonas = !zona && zonasDisponibles.length > 1 ? ` (Zonas disponibles: ${zonasDisponibles.join(', ')})` : '';\n  return {\n    tiene_alternativas: false,\n    disponible: false,\n    mensaje: `Lo siento, no tenemos disponibilidad${mensajeZona} para ${personas} personas el ${validacion.fecha_formateada}${sugerenciaZonas}. ¿Te gustaría que busque en otra fecha?`,\n    alternativas: [],\n    detalles: {\n      fecha: validacion.fecha,\n      hora_solicitada: validacion.hora,\n      personas: personas,\n      zona_solicitada: zona,\n      zonas_disponibles: zonasDisponibles\n    },\n    accion_sugerida: !zona && zonasDisponibles.length > 1 ? 'elegir_zona_primero' : 'sugerir_otra_fecha'\n  };\n}\n\nconst listaHoras = horasDisponibles.join(', ');\nconst mensajeZona = zona ? ` en ${zona}` : '';\nconst mensaje = `Lo siento, no tenemos disponibilidad a las ${validacion.hora}${mensajeZona} para ${personas} personas. Sin embargo, sí tenemos disponibilidad en estos otros horarios el ${validacion.fecha_formateada}: ${listaHoras}. ¿Alguno de estos horarios te vendría bien?`;\n\nreturn {\n  tiene_alternativas: true,\n  disponible: false,\n  mensaje: mensaje,\n  alternativas_horario: horasDisponibles,\n  detalles: {\n    fecha: validacion.fecha,\n    hora_solicitada: validacion.hora,\n    personas: personas,\n    zona_solicitada: zona,\n    zonas_disponibles: zonasDisponibles,\n    total_alternativas: horasDisponibles.length\n  },\n  accion_sugerida: 'elegir_alternativa'\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        208
      ],
      "id": "5d8a39ee-eff8-4da1-8c5a-2caf39cb6f02",
      "name": "⚠️ Respuesta: No Disponible",
      "notes": "✅ Filtra alternativas solo en zonas activas"
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "🏪 Obtener Restaurant Settings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🏪 Obtener Restaurant Settings": {
      "main": [
        [
          {
            "node": "🔍 Validar Input + Zonas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔍 Validar Input + Zonas": {
      "main": [
        [
          {
            "node": "📍 Buscar Slots Disponibles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📍 Buscar Slots Disponibles": {
      "main": [
        [
          {
            "node": "❓ ¿Hay Slots?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "❓ ¿Hay Slots?": {
      "main": [
        [
          {
            "node": "✅ Respuesta: Disponible",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "🔎 Buscar Alternativas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🔎 Buscar Alternativas": {
      "main": [
        [
          {
            "node": "⚠️ Respuesta: No Disponible",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Start": [
      {
        "date": "2025-10-21",
        "time": "20:00",
        "party_size": 4,
        "preferred_zone": "terraza",
        "restaurant_id": "d6b63130-1ebf-4284-98fc-a3b31a85d9d1"
      }
    ]
  },
  "meta": {
    "instanceId": "968c65341fc947850f62b4a42d249947219a244717952c0dbaf2b62952e73bd9"
  }
}

