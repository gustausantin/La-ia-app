{
  "name": "05 - RAG Knowledge Processor ‚úÖ",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "process-knowledge",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ],
      "id": "webhook-trigger",
      "name": "üì• Webhook Trigger",
      "webhookId": "process-knowledge"
    },
    {
      "parameters": {
        "jsCode": "// =====================================\n// NODO: üîç Validar Input\n// Verificar que tenemos todos los datos necesarios del frontend\n// =====================================\n\nconst data = $input.first().json;\n\nconsole.log('üì• Input recibido desde frontend:', {\n  restaurant_id: data.restaurant_id,\n  file_name: data.file_name,\n  category: data.category,\n  file_type: data.file_type\n});\n\n// ========== VALIDACIONES ==========\nif (!data.restaurant_id) {\n  throw new Error('‚ùå restaurant_id es obligatorio');\n}\n\nif (!data.file_path) {\n  throw new Error('‚ùå file_path es obligatorio (ej: {restaurant_id}/menu/carta.pdf)');\n}\n\nif (!data.category) {\n  throw new Error('‚ùå category es obligatorio');\n}\n\nif (!['menu', 'services', 'other'].includes(data.category)) {\n  throw new Error('‚ùå category debe ser: menu, services, o other');\n}\n\nif (!data.file_type) {\n  throw new Error('‚ùå file_type es obligatorio (MIME type)');\n}\n\n// Validar tipos de archivo aceptados\nconst acceptedTypes = [\n  'application/pdf',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // DOCX\n  'application/msword', // DOC\n  'text/plain' // TXT\n];\n\nif (!acceptedTypes.includes(data.file_type)) {\n  throw new Error(`‚ùå Tipo de archivo no soportado: ${data.file_type}`);\n}\n\nconsole.log('‚úÖ Validaci√≥n correcta');\nconsole.log('üìÇ Restaurant ID:', data.restaurant_id);\nconsole.log('üìÅ Category:', data.category);\nconsole.log('üìÑ File:', data.file_name);\nconsole.log('üóÇÔ∏è Type:', data.file_type);\nconsole.log('üÜî File ID:', data.file_id || 'N/A');\n\nreturn {\n  restaurant_id: data.restaurant_id,\n  file_path: data.file_path,\n  file_name: data.file_name || 'documento',\n  file_type: data.file_type,\n  category: data.category,\n  file_id: data.file_id || null,\n  uploaded_at: data.uploaded_at || new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ],
      "id": "validate-input",
      "name": "üîç Validar Input"
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "url": "=https://ktsqwvhqamedpmzkzjaz.supabase.co/storage/v1/object/restaurant-knowledge/{{ $json.file_path }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        680,
        300
      ],
      "id": "download-from-storage",
      "name": "üì• Descargar de Supabase Storage",
      "credentials": {
        "httpHeaderAuth": {
          "id": "supabase-storage-auth",
          "name": "Supabase Storage Auth"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('üîç Validar Input').item.json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('üîç Validar Input').item.json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "DOCX"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('üîç Validar Input').item.json.file_type }}",
                    "rightValue": "application/msword",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "DOC"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('üîç Validar Input').item.json.file_type }}",
                    "rightValue": "text/plain",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TXT"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        900,
        300
      ],
      "id": "switch-file-type",
      "name": "üîÄ Switch por Tipo de Archivo"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1120,
        120
      ],
      "id": "extract-pdf",
      "name": "üìÑ Extract PDF"
    },
    {
      "parameters": {
        "operation": "docx"
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1120,
        260
      ],
      "id": "extract-docx",
      "name": "üìù Extract DOCX"
    },
    {
      "parameters": {
        "operation": "doc"
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1120,
        400
      ],
      "id": "extract-doc",
      "name": "üìù Extract DOC"
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1120,
        540
      ],
      "id": "extract-txt",
      "name": "üìÉ Extract TXT"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "restaurant_knowledge_vectors",
          "mode": "list",
          "cachedResultName": "restaurant_knowledge_vectors"
        },
        "options": {
          "queryName": "match_restaurant_knowledge"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1340,
        300
      ],
      "id": "vector-store",
      "name": "üíæ Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "supabase-laia-creds",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1180,
        480
      ],
      "id": "embeddings-openai",
      "name": "üß† Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "openai-laia-creds",
          "name": "OpenAI La-IA"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "restaurant_id",
                "value": "={{ $('üîç Validar Input').item.json.restaurant_id }}"
              },
              {
                "name": "category",
                "value": "={{ $('üîç Validar Input').item.json.category }}"
              },
              {
                "name": "file_name",
                "value": "={{ $('üîç Validar Input').item.json.file_name }}"
              },
              {
                "name": "file_type",
                "value": "={{ $('üîç Validar Input').item.json.file_type }}"
              },
              {
                "name": "file_id",
                "value": "={{ $('üîç Validar Input').item.json.file_id }}"
              },
              {
                "name": "uploaded_at",
                "value": "={{ $('üîç Validar Input').item.json.uploaded_at }}"
              },
              {
                "name": "processed_at",
                "value": "={{ $now.toISO() }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1180,
        580
      ],
      "id": "data-loader",
      "name": "üìö Default Data Loader"
    },
    {
      "parameters": {
        "chunkSize": 2000,
        "chunkOverlap": 200,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1180,
        680
      ],
      "id": "text-splitter",
      "name": "‚úÇÔ∏è Text Splitter"
    },
    {
      "parameters": {
        "jsCode": "// =====================================\n// NODO: üîÑ Actualizar restaurant_id\n// Insertar restaurant_id en la columna\n// =====================================\n\nconst inputData = $('üîç Validar Input').first().json;\n\nconsole.log('üîÑ Actualizando restaurant_id en vectores...');\n\n// Actualizar todos los vectores con este file_id\nconst { error } = await this.helpers.httpRequestWithAuthentication.call(\n  this,\n  'supabaseApi',\n  {\n    method: 'PATCH',\n    url: `https://ktsqwvhqamedpmzkzjaz.supabase.co/rest/v1/restaurant_knowledge_vectors?metadata->>file_id=eq.${inputData.file_id}`,\n    headers: {\n      'Content-Type': 'application/json',\n      'Prefer': 'return=minimal'\n    },\n    body: {\n      restaurant_id: inputData.restaurant_id\n    }\n  }\n);\n\nif (error) {\n  console.error('‚ùå Error:', error);\n  throw new Error(`Error actualizando restaurant_id: ${error.message}`);\n}\n\nconsole.log('‚úÖ restaurant_id actualizado correctamente');\n\nreturn inputData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1450,
        300
      ],
      "id": "update-restaurant-id",
      "name": "üîÑ Actualizar restaurant_id",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// =====================================\n// NODO: ‚úÖ Marcar como Procesado\n// Actualizar estado en restaurant_knowledge_files\n// =====================================\n\nconst inputData = $('üîç Validar Input').first().json;\n\nconsole.log('‚úÖ Archivo procesado correctamente');\nconsole.log('üìÑ File:', inputData.file_name);\nconsole.log('üÜî File ID:', inputData.file_id);\n\n// Actualizar estado en Supabase (si existe file_id)\nif (inputData.file_id) {\n  try {\n    const { data, error } = await this.helpers.httpRequestWithAuthentication.call(\n      this,\n      'supabaseApi',\n      {\n        method: 'PATCH',\n        url: `https://ktsqwvhqamedpmzkzjaz.supabase.co/rest/v1/restaurant_knowledge_files?id=eq.${inputData.file_id}`,\n        headers: {\n          'Content-Type': 'application/json',\n          'Prefer': 'return=minimal'\n        },\n        body: {\n          status: 'completed',\n          processed_at: new Date().toISOString()\n        }\n      }\n    );\n    \n    if (error) {\n      console.error('‚ö†Ô∏è Error al actualizar estado:', error);\n    } else {\n      console.log('‚úÖ Estado actualizado en BD: completed');\n    }\n  } catch (e) {\n    console.error('‚ö†Ô∏è Error al conectar con Supabase:', e.message);\n  }\n} else {\n  console.log('‚ö†Ô∏è No hay file_id, saltando actualizaci√≥n de BD');\n}\n\nreturn {\n  success: true,\n  restaurant_id: inputData.restaurant_id,\n  file_name: inputData.file_name,\n  file_id: inputData.file_id,\n  category: inputData.category,\n  processed_at: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1670,
        300
      ],
      "id": "mark-completed",
      "name": "‚úÖ Marcar como Procesado",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({ success: true, message: 'Documento procesado correctamente', file_name: $json.file_name, restaurant_id: $json.restaurant_id, file_id: $json.file_id }) }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1780,
        300
      ],
      "id": "response-ok",
      "name": "‚úÖ Respuesta OK"
    },
    {
      "parameters": {
        "jsCode": "// =====================================\n// NODO: ‚ùå Error Handler\n// Capturar errores y actualizar BD\n// =====================================\n\nconst error = $input.first().json.error || $input.first().json.message || 'Error desconocido';\nlet inputData;\n\ntry {\n  inputData = $('üîç Validar Input').first().json;\n} catch (e) {\n  // Si falla antes de validar, no tenemos inputData\n  inputData = {\n    file_name: 'desconocido',\n    restaurant_id: null,\n    file_id: null\n  };\n}\n\nconsole.error('‚ùå Error al procesar archivo:', error);\nconsole.error('üìÑ File:', inputData.file_name);\n\n// Actualizar estado en Supabase (si existe file_id)\nif (inputData.file_id) {\n  try {\n    await this.helpers.httpRequestWithAuthentication.call(\n      this,\n      'supabaseApi',\n      {\n        method: 'PATCH',\n        url: `https://ktsqwvhqamedpmzkzjaz.supabase.co/rest/v1/restaurant_knowledge_files?id=eq.${inputData.file_id}`,\n        headers: {\n          'Content-Type': 'application/json',\n          'Prefer': 'return=minimal'\n        },\n        body: {\n          status: 'failed',\n          error_message: error.toString().substring(0, 500)\n        }\n      }\n    );\n    console.log('‚úÖ Estado actualizado en BD: failed');\n  } catch (e) {\n    console.error('‚ö†Ô∏è No se pudo actualizar estado de error en BD:', e.message);\n  }\n}\n\nreturn {\n  success: false,\n  error: error.toString(),\n  restaurant_id: inputData.restaurant_id,\n  file_name: inputData.file_name,\n  file_id: inputData.file_id\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        100
      ],
      "id": "error-handler",
      "name": "‚ùå Error Handler",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({ success: false, error: $json.error, file_name: $json.file_name, file_id: $json.file_id }) }}",
        "options": {
          "responseCode": 500,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1780,
        100
      ],
      "id": "response-error",
      "name": "‚ùå Respuesta Error"
    }
  ],
  "connections": {
    "üì• Webhook Trigger": {
      "main": [
        [
          {
            "node": "üîç Validar Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Validar Input": {
      "main": [
        [
          {
            "node": "üì• Descargar de Supabase Storage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì• Descargar de Supabase Storage": {
      "main": [
        [
          {
            "node": "üîÄ Switch por Tipo de Archivo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÄ Switch por Tipo de Archivo": {
      "main": [
        [
          {
            "node": "üìÑ Extract PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üìù Extract DOCX",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üìù Extract DOC",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üìÉ Extract TXT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìÑ Extract PDF": {
      "main": [
        [
          {
            "node": "üíæ Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìù Extract DOCX": {
      "main": [
        [
          {
            "node": "üíæ Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìù Extract DOC": {
      "main": [
        [
          {
            "node": "üíæ Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìÉ Extract TXT": {
      "main": [
        [
          {
            "node": "üíæ Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Supabase Vector Store": {
      "main": [
        [
          {
            "node": "üîÑ Actualizar restaurant_id",
            "type": "main",
            "index": 0
          },
          {
            "node": "‚ùå Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÑ Actualizar restaurant_id": {
      "main": [
        [
          {
            "node": "‚úÖ Marcar como Procesado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Marcar como Procesado": {
      "main": [
        [
          {
            "node": "‚úÖ Respuesta OK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùå Error Handler": {
      "main": [
        [
          {
            "node": "‚ùå Respuesta Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "üíæ Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "üìö Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "üíæ Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "‚úÇÔ∏è Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "üìö Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-20T00:00:00.000Z",
      "updatedAt": "2025-10-20T00:00:00.000Z",
      "id": "rag-system",
      "name": "RAG System"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-10-20T00:00:00.000Z",
  "versionId": "v2-optimized"
}

