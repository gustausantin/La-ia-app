{
  "name": "1Ô∏è‚É£ WhatsApp Buffer (Multi-Tenant FINAL)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 300],
      "id": "webhook-whatsapp",
      "name": "Webhook WhatsApp",
      "webhookId": "whatsapp-inbound"
    },
    {
      "parameters": {
        "jsCode": "const webhookData = $input.first().json;\nconst data = webhookData.body || webhookData;\n\nconsole.log('üì• Webhook recibido:', JSON.stringify(data, null, 2));\n\n// Funci√≥n para limpiar SOLO 'whatsapp:' pero DEJAR el '+'\nconst cleanPhone = (phone) => {\n  if (!phone) return '';\n  return phone.toString().replace('whatsapp:', '').trim();\n};\n\nconst fromRaw = data.From || '';\nconst toRaw = data.To || '';\nconst body = data.Body || '';\nconst profileName = data.ProfileName || 'Cliente';\n\n// Limpiar pero MANTENER el '+'\nconst customerPhone = cleanPhone(fromRaw);\nconst restaurantPhone = cleanPhone(toRaw);\nconst bufferKey = `${customerPhone}_${Math.floor(Date.now() / 10000) * 10000}`;\n\nconsole.log('‚úÖ Limpiado (CON +):', { customerPhone, restaurantPhone, body, bufferKey });\n\nreturn {\n  customer_phone: customerPhone,\n  customer_name: profileName,\n  message_text: body,\n  restaurant_phone: restaurantPhone,\n  buffer_key: bufferKey,\n  timestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "id": "normalize",
      "name": "üìù Normalizar"
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "getAll",
        "tableId": "restaurants",
        "returnAll": true,
        "options": {
          "columns": {
            "columnsString": "id,name,channels"
          }
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [680, 300],
      "id": "get-restaurants",
      "name": "üîç Get Restaurants",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const normalized = $('üìù Normalizar').first().json;\nconst restaurants = $input.all();\n\nconsole.log('üîç Buscando restaurante para:', normalized.restaurant_phone);\n\nconst matched = restaurants.find(r => {\n  const restaurant = r.json;\n  const channels = restaurant.channels || {};\n  const whatsapp = channels.whatsapp || {};\n  const whatsappNumber = whatsapp.phone_number || '';\n  \n  console.log(`  ${restaurant.name}: ${whatsappNumber} === ${normalized.restaurant_phone}`);\n  \n  // Comparaci√≥n EXACTA (ambos con +)\n  return whatsappNumber === normalized.restaurant_phone;\n});\n\nif (!matched) {\n  console.error('‚ùå No se encontr√≥ restaurante');\n  throw new Error(`Restaurant not found for ${normalized.restaurant_phone}`);\n}\n\nconsole.log('‚úÖ Match:', matched.json.name);\n\nreturn {\n  ...normalized,\n  restaurant_id: matched.json.id,\n  restaurant_name: matched.json.name\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300],
      "id": "find-restaurant",
      "name": "‚úÖ Find Restaurant"
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "getAll",
        "tableId": "whatsapp_message_buffer",
        "returnAll": false,
        "limit": 1,
        "filters": {
          "conditions": [
            {
              "keyName": "buffer_key",
              "condition": "eq",
              "keyValue": "={{ $('‚úÖ Find Restaurant').item.json.buffer_key }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1120, 300],
      "id": "check-buffer",
      "name": "üîé Check Buffer",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      },
      "continueOnFail": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $input.all().length }}",
              "operation": "equal",
              "value2": 0
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300],
      "id": "if-new",
      "name": "‚ùì ¬øNuevo?"
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "create",
        "tableId": "whatsapp_message_buffer",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "buffer_key",
              "fieldValue": "={{ $('‚úÖ Find Restaurant').item.json.buffer_key }}"
            },
            {
              "fieldId": "restaurant_id",
              "fieldValue": "={{ $('‚úÖ Find Restaurant').item.json.restaurant_id }}"
            },
            {
              "fieldId": "customer_phone",
              "fieldValue": "={{ $('‚úÖ Find Restaurant').item.json.customer_phone }}"
            },
            {
              "fieldId": "customer_name",
              "fieldValue": "={{ $('‚úÖ Find Restaurant').item.json.customer_name }}"
            },
            {
              "fieldId": "messages",
              "fieldValue": "={{ $('‚úÖ Find Restaurant').item.json.message_text }}"
            },
            {
              "fieldId": "message_count",
              "fieldValue": 1
            },
            {
              "fieldId": "first_message_at",
              "fieldValue": "={{ $('‚úÖ Find Restaurant').item.json.timestamp }}"
            },
            {
              "fieldId": "last_message_at",
              "fieldValue": "={{ $('‚úÖ Find Restaurant').item.json.timestamp }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1560, 180],
      "id": "create-buffer",
      "name": "‚ûï Crear Buffer",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const existing = $input.first().json;\nconst newMessage = $('‚úÖ Find Restaurant').first().json.message_text;\nconst updatedMessages = existing.messages + '\\n' + newMessage;\n\nreturn {\n  buffer_key: existing.buffer_key,\n  messages: updatedMessages,\n  message_count: existing.message_count + 1,\n  last_message_at: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 420],
      "id": "prepare-update",
      "name": "üìù Preparar Update"
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "update",
        "tableId": "whatsapp_message_buffer",
        "updateKey": "buffer_key",
        "id": "={{ $json.buffer_key }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "messages",
              "fieldValue": "={{ $json.messages }}"
            },
            {
              "fieldId": "message_count",
              "fieldValue": "={{ $json.message_count }}"
            },
            {
              "fieldId": "last_message_at",
              "fieldValue": "={{ $json.last_message_at }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1780, 420],
      "id": "update-buffer",
      "name": "üîÑ Update Buffer",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "amount": 10,
        "unit": "seconds"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1780, 180],
      "id": "wait-10s",
      "name": "‚è∞ Wait 10s",
      "webhookId": "wait-buffer"
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "getAll",
        "tableId": "whatsapp_message_buffer",
        "returnAll": false,
        "limit": 1,
        "filters": {
          "conditions": [
            {
              "keyName": "buffer_key",
              "condition": "eq",
              "keyValue": "={{ $('‚úÖ Find Restaurant').item.json.buffer_key }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2000, 180],
      "id": "get-final",
      "name": "üìä Get Final Buffer",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "delete",
        "tableId": "whatsapp_message_buffer",
        "filters": {
          "conditions": [
            {
              "keyName": "buffer_key",
              "condition": "eq",
              "keyValue": "={{ $json.buffer_key }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2220, 180],
      "id": "delete-buffer",
      "name": "üóëÔ∏è Delete Buffer",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const buffer = $input.first().json;\n\nreturn {\n  channel: 'whatsapp',\n  restaurant_id: buffer.restaurant_id,\n  customer_phone: buffer.customer_phone,\n  customer_name: buffer.customer_name,\n  user_message: buffer.messages,\n  message_count: buffer.message_count,\n  timestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 180],
      "id": "prepare-gateway",
      "name": "üì¶ Para Gateway"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "GATEWAY_WORKFLOW_ID",
          "mode": "id",
          "cachedResultName": "2Ô∏è‚É£ Gateway Unificado"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [2660, 180],
      "id": "execute-gateway",
      "name": "üöÄ Ejecutar Gateway"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({status: 'ok', action: 'buffered'}) }}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 420],
      "id": "respond-update",
      "name": "‚úÖ OK (Update)"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({status: 'ok', action: 'processed'}) }}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2660, 180],
      "id": "respond-final",
      "name": "‚úÖ OK (Final)"
    }
  ],
  "connections": {
    "Webhook WhatsApp": {
      "main": [[{"node": "üìù Normalizar", "type": "main", "index": 0}]]
    },
    "üìù Normalizar": {
      "main": [[{"node": "üîç Get Restaurants", "type": "main", "index": 0}]]
    },
    "üîç Get Restaurants": {
      "main": [[{"node": "‚úÖ Find Restaurant", "type": "main", "index": 0}]]
    },
    "‚úÖ Find Restaurant": {
      "main": [[{"node": "üîé Check Buffer", "type": "main", "index": 0}]]
    },
    "üîé Check Buffer": {
      "main": [[{"node": "‚ùì ¬øNuevo?", "type": "main", "index": 0}]]
    },
    "‚ùì ¬øNuevo?": {
      "main": [
        [{"node": "‚ûï Crear Buffer", "type": "main", "index": 0}],
        [{"node": "üìù Preparar Update", "type": "main", "index": 0}]
      ]
    },
    "‚ûï Crear Buffer": {
      "main": [[{"node": "‚è∞ Wait 10s", "type": "main", "index": 0}]]
    },
    "üìù Preparar Update": {
      "main": [[{"node": "üîÑ Update Buffer", "type": "main", "index": 0}]]
    },
    "üîÑ Update Buffer": {
      "main": [[{"node": "‚úÖ OK (Update)", "type": "main", "index": 0}]]
    },
    "‚è∞ Wait 10s": {
      "main": [[{"node": "üìä Get Final Buffer", "type": "main", "index": 0}]]
    },
    "üìä Get Final Buffer": {
      "main": [[{"node": "üóëÔ∏è Delete Buffer", "type": "main", "index": 0}]]
    },
    "üóëÔ∏è Delete Buffer": {
      "main": [[{"node": "üì¶ Para Gateway", "type": "main", "index": 0}]]
    },
    "üì¶ Para Gateway": {
      "main": [[{"node": "üöÄ Ejecutar Gateway", "type": "main", "index": 0}]]
    },
    "üöÄ Ejecutar Gateway": {
      "main": [[{"node": "‚úÖ OK (Final)", "type": "main", "index": 0}]]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-13T11:00:00.000Z",
  "versionId": "FINAL"
}

