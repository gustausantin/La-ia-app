{
  "name": "TOOL ‚Äî modify_reservation (Simplificado)",
  "nodes": [
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"reservation_id\": \"2f3163a5-d1be-42dd-8341-febb67e300b9\",\n  \"restaurant_id\": \"d6b63130-1ebf-4284-98fc-a3b31a85d9d1\",\n  \"new_date\": \"2025-10-22\",\n  \"new_time\": \"20:00\",\n  \"new_party_size\": 4,\n  \"new_slot_id\": \"uuid-slot-nuevo\",\n  \"new_table_id\": \"uuid-mesa-nueva\",\n  \"preferred_zone\": \"interior\",\n  \"special_requests\": \"cumplea√±os\"\n}"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1200,
        240
      ],
      "id": "start-node",
      "name": "Start"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.item.json;\n\nconsole.log('üîç Input recibido:', JSON.stringify(input, null, 2));\n\n// ‚úÖ Validar campos obligatorios\nconst required = ['reservation_id', 'restaurant_id'];\nconst missing = required.filter(field => !input[field]);\n\nif (missing.length > 0) {\n  throw new Error(`‚ùå Faltan campos obligatorios: ${missing.join(', ')}`);\n}\n\n// Al menos uno de estos campos debe estar presente\nif (!input.new_date && !input.new_time && !input.new_party_size && !input.special_requests) {\n  throw new Error('‚ùå Debes proporcionar al menos un campo a modificar');\n}\n\nreturn {\n  reservation_id: input.reservation_id,\n  restaurant_id: input.restaurant_id,\n  \n  // Nuevos valores (pueden ser null si no se modifican)\n  new_date: input.new_date || null,\n  new_time: input.new_time || null,\n  new_party_size: input.new_party_size ? parseInt(input.new_party_size) : null,\n  new_slot_id: input.new_slot_id || null,\n  new_table_id: input.new_table_id || null,\n  \n  // Opcionales\n  preferred_zone: input.preferred_zone || null,\n  special_requests: input.special_requests || null\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1040,
        240
      ],
      "id": "validate-input",
      "name": "üîç Validar Input"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "reservations",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $json.reservation_id }}"
            },
            {
              "keyName": "restaurant_id",
              "keyValue": "={{ $json.restaurant_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -880,
        240
      ],
      "id": "find-reservation",
      "name": "üìã Buscar Reserva Existente",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const inputData = $('üîç Validar Input').item.json;\nconst reservation = $input.item.json;\n\nif (!reservation || !reservation.id) {\n  throw new Error('‚ùå Reserva no encontrada');\n}\n\nconsole.log('üìã Reserva encontrada:', {\n  id: reservation.id,\n  current_date: reservation.reservation_date,\n  current_time: reservation.reservation_time,\n  current_party_size: reservation.party_size,\n  table_id: reservation.table_id\n});\n\n// Validar que la reserva se puede modificar\nconst validStatuses = ['pending', 'confirmed', 'pending_approval'];\nif (!validStatuses.includes(reservation.status)) {\n  throw new Error(`‚ùå No se puede modificar una reserva con estado: ${reservation.status}`);\n}\n\n// Determinar valores finales\nconst finalDate = inputData.new_date || reservation.reservation_date;\nconst finalTime = inputData.new_time || reservation.reservation_time;\nconst finalPartySize = inputData.new_party_size || reservation.party_size;\nconst finalTableId = inputData.new_table_id || reservation.table_id;\n\n// ‚úÖ Detectar si cambi√≥ fecha/hora (necesitamos cambiar slots)\nconst dateTimeChanged = \n  (inputData.new_date && inputData.new_date !== reservation.reservation_date) ||\n  (inputData.new_time && inputData.new_time !== reservation.reservation_time);\n\nconsole.log('üîÑ Cambios detectados:', {\n  date_changed: inputData.new_date && inputData.new_date !== reservation.reservation_date,\n  time_changed: inputData.new_time && inputData.new_time !== reservation.reservation_time,\n  party_size_changed: inputData.new_party_size && inputData.new_party_size !== reservation.party_size,\n  need_slot_change: dateTimeChanged\n});\n\nreturn {\n  // Datos originales\n  reservation_id: reservation.id,\n  restaurant_id: reservation.restaurant_id,\n  customer_id: reservation.customer_id,\n  customer_phone: reservation.customer_phone,\n  customer_name: reservation.customer_name,\n  old_table_id: reservation.table_id,\n  old_date: reservation.reservation_date,\n  old_time: reservation.reservation_time,\n  old_party_size: reservation.party_size,\n  \n  // Datos finales\n  final_date: finalDate,\n  final_time: finalTime,\n  final_party_size: finalPartySize,\n  final_table_id: finalTableId,\n  special_requests: inputData.special_requests || reservation.special_requests,\n  \n  // Nuevos IDs (del check_availability previo)\n  new_slot_id: inputData.new_slot_id,\n  new_table_id: inputData.new_table_id,\n  \n  // Flag\n  need_slot_change: dateTimeChanged\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -720,
        240
      ],
      "id": "prepare-modification",
      "name": "üîÑ Preparar Modificaci√≥n"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-slot-change",
              "leftValue": "={{ $json.need_slot_change }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -560,
        240
      ],
      "id": "check-slot-change",
      "name": "‚ùì ¬øCambia Fecha/Hora?"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "availability_slots",
        "filters": {
          "conditions": [
            {
              "keyName": "slot_date",
              "condition": "eq",
              "keyValue": "={{ $json.old_date }}"
            },
            {
              "keyName": "start_time",
              "condition": "eq",
              "keyValue": "={{ $json.old_time }}"
            },
            {
              "keyName": "table_id",
              "condition": "eq",
              "keyValue": "={{ $json.old_table_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "free"
            },
            {
              "fieldId": "is_available",
              "fieldValue": true
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -320,
        160
      ],
      "id": "free-old-slot",
      "name": "üîì Liberar Slot Antiguo",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "availability_slots",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.new_slot_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "reserved"
            },
            {
              "fieldId": "is_available",
              "fieldValue": false
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -160,
        160
      ],
      "id": "reserve-new-slot",
      "name": "üîí Marcar Nuevo Slot",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "reservations",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.reservation_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "reservation_date",
              "fieldValue": "={{ $json.final_date }}"
            },
            {
              "fieldId": "reservation_time",
              "fieldValue": "={{ $json.final_time }}"
            },
            {
              "fieldId": "party_size",
              "fieldValue": "={{ $json.final_party_size }}"
            },
            {
              "fieldId": "table_id",
              "fieldValue": "={{ $json.final_table_id }}"
            },
            {
              "fieldId": "special_requests",
              "fieldValue": "={{ $json.special_requests }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $now.toISO() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        0,
        160
      ],
      "id": "update-reservation-with-slot",
      "name": "üíæ Actualizar Reserva",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "reservations",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.reservation_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "party_size",
              "fieldValue": "={{ $json.final_party_size }}"
            },
            {
              "fieldId": "special_requests",
              "fieldValue": "={{ $json.special_requests }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $now.toISO() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -320,
        320
      ],
      "id": "update-reservation-no-slot",
      "name": "üíæ Actualizar Solo Datos",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const reservation = $input.item.json;\nconst oldData = $('üîÑ Preparar Modificaci√≥n').item.json;\n\nconsole.log('‚úÖ Reserva modificada exitosamente:', reservation.id);\n\nconst changes = [];\nif (oldData.old_date !== oldData.final_date) {\n  changes.push(`fecha: ${oldData.old_date} ‚Üí ${oldData.final_date}`);\n}\nif (oldData.old_time !== oldData.final_time) {\n  changes.push(`hora: ${oldData.old_time} ‚Üí ${oldData.final_time}`);\n}\nif (oldData.old_party_size !== oldData.final_party_size) {\n  changes.push(`personas: ${oldData.old_party_size} ‚Üí ${oldData.final_party_size}`);\n}\n\nreturn {\n  success: true,\n  reservation_id: reservation.id,\n  message: `¬°Listo, ${oldData.customer_name}! Tu reserva ha sido modificada exitosamente. Nueva fecha: ${oldData.final_date} a las ${oldData.final_time} para ${oldData.final_party_size} personas.`,\n  details: {\n    reservation_id: reservation.id,\n    changes: changes.join(', '),\n    new_date: oldData.final_date,\n    new_time: oldData.final_time,\n    new_party_size: oldData.final_party_size,\n    customer_name: oldData.customer_name\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        240
      ],
      "id": "success-response",
      "name": "‚úÖ Respuesta: √âxito"
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "üîç Validar Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Validar Input": {
      "main": [
        [
          {
            "node": "üìã Buscar Reserva Existente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Buscar Reserva Existente": {
      "main": [
        [
          {
            "node": "üîÑ Preparar Modificaci√≥n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÑ Preparar Modificaci√≥n": {
      "main": [
        [
          {
            "node": "‚ùì ¬øCambia Fecha/Hora?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚ùì ¬øCambia Fecha/Hora?": {
      "main": [
        [
          {
            "node": "üîì Liberar Slot Antiguo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üíæ Actualizar Solo Datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîì Liberar Slot Antiguo": {
      "main": [
        [
          {
            "node": "üîí Marcar Nuevo Slot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîí Marcar Nuevo Slot": {
      "main": [
        [
          {
            "node": "üíæ Actualizar Reserva",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Actualizar Reserva": {
      "main": [
        [
          {
            "node": "‚úÖ Respuesta: √âxito",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Actualizar Solo Datos": {
      "main": [
        [
          {
            "node": "‚úÖ Respuesta: √âxito",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Start": [
      {
        "reservation_id": "2f3163a5-d1be-42dd-8341-febb67e300b9",
        "restaurant_id": "d6b63130-1ebf-4284-98fc-a3b31a85d9d1",
        "new_date": "2025-10-22",
        "new_time": "20:00",
        "new_party_size": 4,
        "new_slot_id": "uuid-slot-disponible",
        "new_table_id": "uuid-mesa-disponible",
        "special_requests": "ninguna"
      }
    ]
  },
  "meta": {
    "instanceId": "968c65341fc947850f62b4a42d249947219a244717952c0dbaf2b62952e73bd9"
  }
}


