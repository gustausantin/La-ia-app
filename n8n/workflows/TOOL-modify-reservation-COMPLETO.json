{
  "name": "üîß TOOL: modify_reservation ‚Äî COMPLETO",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [-1200, 240],
      "id": "start-node",
      "name": "‚ñ∂Ô∏è Start"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.item.json;\n\nconsole.log('üîç Input recibido:', JSON.stringify(input, null, 2));\n\n// ‚úÖ Validar datos m√≠nimos para BUSCAR la reserva\nconst required = ['restaurant_id', 'customer_id'];\nconst missing = required.filter(field => !input[field]);\n\nif (missing.length > 0) {\n  throw new Error(`‚ùå Faltan campos obligatorios: ${missing.join(', ')}`);\n}\n\n// Al menos uno de estos campos debe estar presente para modificar\nif (!input.new_date && !input.new_time && !input.new_party_size) {\n  throw new Error('‚ùå Debes proporcionar al menos un campo a modificar: new_date, new_time o new_party_size');\n}\n\nreturn {\n  // ‚úÖ Datos para BUSCAR la reserva\n  restaurant_id: input.restaurant_id,\n  customer_id: input.customer_id,\n  customer_phone: input.customer_phone,\n  \n  // Nuevos valores (pueden ser null si no se modifican)\n  new_date: input.new_date || null,\n  new_time: input.new_time || null,\n  new_party_size: input.new_party_size ? parseInt(input.new_party_size) : null,\n  \n  // Otros campos opcionales\n  preferred_zone: input.preferred_zone || null,\n  special_requests: input.special_requests || null\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1000, 240],
      "id": "validate-input",
      "name": "üîç Validar Input"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "reservations",
        "returnAll": false,
        "limit": 1,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "customer_id",
              "condition": "eq",
              "keyValue": "={{ $json.customer_id }}"
            },
            {
              "keyName": "restaurant_id",
              "condition": "eq",
              "keyValue": "={{ $json.restaurant_id }}"
            },
            {
              "keyName": "status",
              "condition": "in",
              "keyValue": "pending,confirmed,pending_approval"
            }
          ]
        },
        "sort": {
          "sortProperties": [
            {
              "property": "reservation_date",
              "direction": "asc"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [-800, 240],
      "id": "get-reservation",
      "name": "üìã Buscar Reserva Existente",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const inputData = $('üîç Validar Input').first().json;\nconst reservations = $input.all();\n\n// ‚úÖ Verificar que se encontr√≥ al menos una reserva\nif (reservations.length === 0) {\n  throw new Error('‚ùå No se encontr√≥ ninguna reserva activa para este cliente');\n}\n\nconst reservation = reservations[0].json;\n\nif (!reservation || !reservation.id) {\n  throw new Error('‚ùå Reserva no encontrada');\n}\n\nconsole.log('üìã Reserva encontrada:', {\n  id: reservation.id,\n  current_date: reservation.reservation_date,\n  current_time: reservation.reservation_time,\n  current_party_size: reservation.party_size,\n  table_id: reservation.table_id\n});\n\n// Validar que la reserva se puede modificar\nconst validStatuses = ['pending', 'confirmed', 'pending_approval'];\nif (!validStatuses.includes(reservation.status)) {\n  throw new Error(`‚ùå No se puede modificar una reserva con estado: ${reservation.status}`);\n}\n\n// Determinar valores finales (usar nuevos si existen, sino mantener actuales)\nconst finalDate = inputData.new_date || reservation.reservation_date;\nconst finalTime = inputData.new_time || reservation.reservation_time;\nconst finalPartySize = inputData.new_party_size || reservation.party_size;\nconst finalZone = inputData.preferred_zone || null;\n\n// Detectar si cambi√≥ la fecha/hora (necesitamos liberar y buscar nuevo slot)\nconst dateTimeChanged = \n  (inputData.new_date && inputData.new_date !== reservation.reservation_date) ||\n  (inputData.new_time && inputData.new_time !== reservation.reservation_time);\n\nconsole.log('üîÑ Cambios detectados:', {\n  date_changed: inputData.new_date && inputData.new_date !== reservation.reservation_date,\n  time_changed: inputData.new_time && inputData.new_time !== reservation.reservation_time,\n  party_size_changed: inputData.new_party_size && inputData.new_party_size !== reservation.party_size,\n  need_new_slot: dateTimeChanged\n});\n\nreturn {\n  // Datos de la reserva original\n  reservation_id: reservation.id,\n  restaurant_id: reservation.restaurant_id,\n  customer_id: reservation.customer_id,\n  customer_phone: reservation.customer_phone,\n  customer_name: reservation.customer_name,\n  old_table_id: reservation.table_id,\n  old_date: reservation.reservation_date,\n  old_time: reservation.reservation_time,\n  old_party_size: reservation.party_size,\n  \n  // Datos finales (nuevos o actuales)\n  final_date: finalDate,\n  final_time: finalTime,\n  final_party_size: finalPartySize,\n  preferred_zone: finalZone,\n  special_requests: inputData.special_requests || reservation.special_requests,\n  \n  // Flags\n  need_new_slot: dateTimeChanged\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-600, 240],
      "id": "prepare-modification",
      "name": "üîÑ Preparar Modificaci√≥n"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-slot-change",
              "leftValue": "={{ $json.need_new_slot }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [-400, 240],
      "id": "check-slot-change",
      "name": "‚ùì ¬øCambia Fecha/Hora?"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "availability_slots",
        "returnAll": true,
        "filterType": "string",
        "filterString": "=restaurant_id=eq.{{ $json.restaurant_id }}&slot_date=eq.{{ $json.final_date }}&start_time=eq.{{ $json.final_time }}&status=eq.free&is_available=is.true{{ $json.preferred_zone ? '&zone=eq.' + $json.preferred_zone : '' }}"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [-200, 128],
      "id": "search-new-slots",
      "name": "üîç Buscar Nuevo Slot",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const slots = $input.all();\nconst modificationData = $('üîÑ Preparar Modificaci√≥n').first().json;\n\nconsole.log('üìä Slots nuevos encontrados:', slots.length);\n\nif (slots.length === 0) {\n  return {\n    disponible: false,\n    mensaje: `No hay mesas disponibles para ${modificationData.final_party_size} personas el ${modificationData.final_date} a las ${modificationData.final_time}.`\n  };\n}\n\n// ‚úÖ FILTRAR POR CAPACIDAD\nconst slotsWithCapacity = slots.filter(s => {\n  const capacity = s.json.capacity;\n  return capacity >= modificationData.final_party_size;\n});\n\nconsole.log('‚úÖ Slots con capacidad suficiente:', slotsWithCapacity.length);\n\nif (slotsWithCapacity.length === 0) {\n  return {\n    disponible: false,\n    mensaje: `No hay mesas con capacidad para ${modificationData.final_party_size} personas en esa fecha y hora.`\n  };\n}\n\n// ‚úÖ Ordenar por capacidad ASC (la m√°s peque√±a que cumpla)\nconst sorted = slotsWithCapacity.sort((a, b) => a.json.capacity - b.json.capacity);\nconst mejorSlot = sorted[0].json;\n\nconsole.log('üéØ Mejor slot nuevo seleccionado:', {\n  id: mejorSlot.id,\n  table_id: mejorSlot.table_id,\n  table_name: mejorSlot.table_name,\n  capacity: mejorSlot.capacity,\n  zone: mejorSlot.zone\n});\n\nreturn {\n  ...modificationData,\n  disponible: true,\n  new_slot_id: mejorSlot.id,\n  new_table_id: mejorSlot.table_id,\n  new_table_name: mejorSlot.table_name,\n  new_capacity: mejorSlot.capacity,\n  new_zone: mejorSlot.zone,\n  start_time: mejorSlot.start_time,\n  end_time: mejorSlot.end_time\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [0, 128],
      "id": "select-best-slot",
      "name": "üéØ Seleccionar Mejor Mesa"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-available",
              "leftValue": "={{ $json.disponible }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [192, 128],
      "id": "check-availability",
      "name": "‚ùì ¬øDisponible?"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "availability_slots",
        "filters": {
          "conditions": [
            {
              "keyName": "reservation_date",
              "condition": "eq",
              "keyValue": "={{ $json.old_date }}"
            },
            {
              "keyName": "start_time",
              "condition": "eq",
              "keyValue": "={{ $json.old_time }}"
            },
            {
              "keyName": "table_id",
              "condition": "eq",
              "keyValue": "={{ $json.old_table_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "free"
            },
            {
              "fieldId": "is_available",
              "fieldValue": true
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [384, 16],
      "id": "free-old-slot",
      "name": "üîì Liberar Slot Antiguo",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "reservations",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.reservation_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "reservation_date",
              "fieldValue": "={{ $json.final_date }}"
            },
            {
              "fieldId": "reservation_time",
              "fieldValue": "={{ $json.final_time }}"
            },
            {
              "fieldId": "party_size",
              "fieldValue": "={{ $json.final_party_size }}"
            },
            {
              "fieldId": "table_id",
              "fieldValue": "={{ $json.new_table_id }}"
            },
            {
              "fieldId": "special_requests",
              "fieldValue": "={{ $json.special_requests }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $now.toISO() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [576, 16],
      "id": "update-reservation",
      "name": "üíæ Actualizar Reserva",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "availability_slots",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('üéØ Seleccionar Mejor Mesa').item.json.new_slot_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "reserved"
            },
            {
              "fieldId": "is_available",
              "fieldValue": false
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [768, 16],
      "id": "reserve-new-slot",
      "name": "üîí Marcar Nuevo Slot Reservado",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const reservation = $('üíæ Actualizar Reserva').first().json;\nconst slotData = $('üéØ Seleccionar Mejor Mesa').first().json;\nconst oldData = $('üîÑ Preparar Modificaci√≥n').first().json;\n\nconsole.log('‚úÖ Reserva modificada:', reservation.id);\n\nconst changes = [];\nif (oldData.old_date !== slotData.final_date) {\n  changes.push(`fecha: ${oldData.old_date} ‚Üí ${slotData.final_date}`);\n}\nif (oldData.old_time !== slotData.final_time) {\n  changes.push(`hora: ${oldData.old_time} ‚Üí ${slotData.final_time}`);\n}\nif (oldData.old_party_size !== slotData.final_party_size) {\n  changes.push(`personas: ${oldData.old_party_size} ‚Üí ${slotData.final_party_size}`);\n}\n\nreturn {\n  success: true,\n  reservation_id: reservation.id,\n  message: `¬°Listo, ${oldData.customer_name}! Tu reserva ha sido modificada. Nueva fecha: ${slotData.final_date} a las ${slotData.final_time} para ${slotData.final_party_size} personas. Mesa: ${slotData.new_table_name} (${slotData.new_zone}).`,\n  details: {\n    reservation_id: reservation.id,\n    changes: changes.join(', '),\n    new_date: slotData.final_date,\n    new_time: slotData.final_time,\n    new_party_size: slotData.final_party_size,\n    new_table: slotData.new_table_name,\n    new_zone: slotData.new_zone,\n    customer_name: oldData.customer_name\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [960, 16],
      "id": "success-response",
      "name": "‚úÖ Respuesta: √âxito (Slot Cambiado)"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "reservations",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.reservation_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "party_size",
              "fieldValue": "={{ $json.final_party_size }}"
            },
            {
              "fieldId": "special_requests",
              "fieldValue": "={{ $json.special_requests }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $now.toISO() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [-200, 352],
      "id": "update-without-slot",
      "name": "üíæ Actualizar Reserva (sin cambio de slot)",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const reservation = $input.first().json;\nconst oldData = $('üîÑ Preparar Modificaci√≥n').first().json;\n\nconsole.log('‚úÖ Reserva actualizada (sin cambio de slot):', reservation.id);\n\nconst changes = [];\nif (oldData.old_party_size !== oldData.final_party_size) {\n  changes.push(`personas: ${oldData.old_party_size} ‚Üí ${oldData.final_party_size}`);\n}\nif (oldData.special_requests) {\n  changes.push(`petici√≥n especial actualizada`);\n}\n\nreturn {\n  success: true,\n  reservation_id: reservation.id,\n  message: `¬°Listo, ${oldData.customer_name}! Tu reserva ha sido actualizada. ${changes.length > 0 ? 'Cambios: ' + changes.join(', ') + '.' : ''} Fecha: ${oldData.final_date} a las ${oldData.final_time}.`,\n  details: {\n    reservation_id: reservation.id,\n    changes: changes.join(', ') || 'solo petici√≥n especial',\n    date: oldData.final_date,\n    time: oldData.final_time,\n    party_size: oldData.final_party_size,\n    customer_name: oldData.customer_name\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [0, 352],
      "id": "success-no-slot",
      "name": "‚úÖ Respuesta: √âxito (sin cambio de slot)"
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first().json;\n\nconsole.log('‚ùå No hay disponibilidad para modificaci√≥n:', data.mensaje);\n\nreturn {\n  success: false,\n  message: data.mensaje,\n  details: {\n    requested_date: data.final_date,\n    requested_time: data.final_time,\n    requested_party_size: data.final_party_size\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [192, 272],
      "id": "error-no-availability",
      "name": "‚ùå Respuesta: Sin Disponibilidad"
    }
  ],
  "connections": {
    "‚ñ∂Ô∏è Start": {
      "main": [[{"node": "üîç Validar Input", "type": "main", "index": 0}]]
    },
    "üîç Validar Input": {
      "main": [[{"node": "üìã Buscar Reserva Existente", "type": "main", "index": 0}]]
    },
    "üìã Buscar Reserva Existente": {
      "main": [[{"node": "üîÑ Preparar Modificaci√≥n", "type": "main", "index": 0}]]
    },
    "üîÑ Preparar Modificaci√≥n": {
      "main": [[{"node": "‚ùì ¬øCambia Fecha/Hora?", "type": "main", "index": 0}]]
    },
    "‚ùì ¬øCambia Fecha/Hora?": {
      "main": [
        [{"node": "üîç Buscar Nuevo Slot", "type": "main", "index": 0}],
        [{"node": "üíæ Actualizar Reserva (sin cambio de slot)", "type": "main", "index": 0}]
      ]
    },
    "üîç Buscar Nuevo Slot": {
      "main": [[{"node": "üéØ Seleccionar Mejor Mesa", "type": "main", "index": 0}]]
    },
    "üéØ Seleccionar Mejor Mesa": {
      "main": [[{"node": "‚ùì ¬øDisponible?", "type": "main", "index": 0}]]
    },
    "‚ùì ¬øDisponible?": {
      "main": [
        [{"node": "‚ùå Respuesta: Sin Disponibilidad", "type": "main", "index": 0}],
        [{"node": "üîì Liberar Slot Antiguo", "type": "main", "index": 0}]
      ]
    },
    "üîì Liberar Slot Antiguo": {
      "main": [[{"node": "üíæ Actualizar Reserva", "type": "main", "index": 0}]]
    },
    "üíæ Actualizar Reserva": {
      "main": [[{"node": "üîí Marcar Nuevo Slot Reservado", "type": "main", "index": 0}]]
    },
    "üîí Marcar Nuevo Slot Reservado": {
      "main": [[{"node": "‚úÖ Respuesta: √âxito (Slot Cambiado)", "type": "main", "index": 0}]]
    },
    "üíæ Actualizar Reserva (sin cambio de slot)": {
      "main": [[{"node": "‚úÖ Respuesta: √âxito (sin cambio de slot)", "type": "main", "index": 0}]]
    },
    "‚úÖ Respuesta: √âxito (Slot Cambiado)": {
      "main": [[]]
    },
    "‚úÖ Respuesta: √âxito (sin cambio de slot)": {
      "main": [[]]
    },
    "‚ùå Respuesta: Sin Disponibilidad": {
      "main": [[]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "tags": []
}


