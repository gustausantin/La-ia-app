{
  "name": "🎙️ BAPI Voice Gateway — FINAL",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "bapi-voice-gateway",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [-800, 240],
      "id": "webhook-bapi",
      "name": "📞 Webhook BAPI",
      "webhookId": "bapi-voice-inbound"
    },
    {
      "parameters": {
        "jsCode": "// ═══════════════════════════════════════════════════════════════\n// NODO: 📝 Normalizar Input VAPI\n// PROPÓSITO: Extraer y validar datos de la llamada de VAPI\n// ═══════════════════════════════════════════════════════════════\n\nconst body = $input.first().json.body || $input.first().json;\n\nconsole.log('📥 VAPI Input completo:', JSON.stringify(body, null, 2));\n\n// ✅ EXTRAER DATOS DE LA LLAMADA (estructura VAPI)\nconst message = body.message || body;\nconst call = message.call || {};\nconst phoneNumber = message.phoneNumber || {};\nconst customer = call.customer || {};\n\n// Teléfonos (mantener formato con +)\nconst customerPhone = customer.number || call.from || '';\nconst restaurantPhone = phoneNumber.number || call.to || '';\n\n// ID de llamada\nconst callId = call.id || '';\n\nconsole.log('✅ Datos extraídos:', {\n  customerPhone,\n  restaurantPhone,\n  callId,\n  callStatus: call.status\n});\n\n// ✅ VALIDACIONES\nif (!restaurantPhone) {\n  throw new Error('❌ No se pudo identificar el teléfono del restaurante (phoneNumber.number). Input recibido: ' + JSON.stringify(phoneNumber));\n}\n\nif (!customerPhone) {\n  throw new Error('❌ No se pudo identificar el teléfono del cliente (call.customer.number). Input recibido: ' + JSON.stringify(customer));\n}\n\nreturn {\n  customer_phone: customerPhone,\n  restaurant_phone: restaurantPhone,\n  call_metadata: {\n    call_id: callId,\n    call_sid: call.transport?.callSid || '',\n    account_sid: call.transport?.accountSid || '',\n    status: call.status || 'unknown',\n    type: call.type || 'inboundPhoneCall',\n    timestamp: message.timestamp || new Date().toISOString(),\n    assistant_id: call.assistantId || ''\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-600, 240],
      "id": "normalize-input",
      "name": "📝 Normalizar Input BAPI"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "restaurants",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "active",
              "condition": "eq",
              "keyValue": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [-400, 240],
      "id": "get-all-restaurants",
      "name": "🔍 Get All Restaurants",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ═══════════════════════════════════════════════════════════════\n// NODO: 🏪 Buscar Restaurante por Teléfono VOZ\n// PROPÓSITO: Buscar en JSONB channels.voice.phone_number\n// ═══════════════════════════════════════════════════════════════\n\nconst normalized = $('📝 Normalizar Input BAPI').first().json;\nconst allRestaurants = $input.all();\n\nconst searchPhone = normalized.restaurant_phone;\n\nconsole.log('🔍 Buscando restaurante con teléfono:', searchPhone);\nconsole.log('📊 Total restaurantes activos:', allRestaurants.length);\n\n// ✅ BUSCAR en channels.voice.phone_number\nconst matched = allRestaurants.find(item => {\n  const restaurant = item.json;\n  const channels = restaurant.channels || {};\n  const voice = channels.voice || {};\n  const voicePhone = voice.phone_number || '';\n  \n  console.log(`  Checking: ${restaurant.name} → ${voicePhone}`);\n  \n  return voicePhone === searchPhone;\n});\n\nif (!matched) {\n  console.error('❌ No se encontró restaurante con teléfono:', searchPhone);\n  throw new Error(`Restaurante no encontrado para teléfono: ${searchPhone}. Verifica channels.voice.phone_number en Supabase.`);\n}\n\nconst restaurant = matched.json;\n\nconsole.log('✅ Restaurante encontrado:', restaurant.name);\nconsole.log('   ID:', restaurant.id);\n\nreturn {\n  ...normalized,\n  restaurant_id: restaurant.id,\n  restaurant_name: restaurant.name,\n  restaurant_data: restaurant\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-200, 240],
      "id": "find-restaurant",
      "name": "🏪 Buscar Restaurante"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "customers",
        "filters": {
          "conditions": [
            {
              "keyName": "restaurant_id",
              "condition": "eq",
              "keyValue": "={{ $json.restaurant_id }}"
            },
            {
              "keyName": "phone",
              "condition": "eq",
              "keyValue": "={{ $json.customer_phone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [0, 160],
      "id": "get-customer",
      "name": "🔍 Buscar Cliente",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-customer-exists",
              "leftValue": "={{ $input.all().length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [200, 240],
      "id": "if-customer-exists",
      "name": "❓ ¿Cliente Existe?"
    },
    {
      "parameters": {
        "tableId": "customers",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "restaurant_id",
              "fieldValue": "={{ $('🏪 Buscar Restaurante').item.json.restaurant_id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "Cliente"
            },
            {
              "fieldId": "phone",
              "fieldValue": "={{ $('🏪 Buscar Restaurante').item.json.customer_phone }}"
            },
            {
              "fieldId": "segment_auto_v2",
              "fieldValue": "nuevo"
            },
            {
              "fieldId": "preferred_channel",
              "fieldValue": "voice"
            },
            {
              "fieldId": "consent_whatsapp",
              "fieldValue": "true"
            },
            {
              "fieldId": "total_visits",
              "fieldValue": "0"
            },
            {
              "fieldId": "visits_count",
              "fieldValue": "0"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [400, 160],
      "id": "create-customer",
      "name": "➕ Crear Cliente",
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ═══════════════════════════════════════════════════════════════\n// NODO: 🔗 Fusionar Cliente\n// PROPÓSITO: Unificar cliente existente o recién creado\n// ═══════════════════════════════════════════════════════════════\n\nconst restaurantData = $('🏪 Buscar Restaurante').first().json;\nconst customerData = $input.first().json;\n\nconsole.log('🔗 Fusionando datos del cliente:', customerData.id);\n\nreturn {\n  ...restaurantData,\n  customer_id: customerData.id,\n  customer_name: customerData.name || 'Cliente',\n  customer_email: customerData.email || null\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 240],
      "id": "merge-customer",
      "name": "🔗 Fusionar Cliente"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "reservations",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "restaurant_id",
              "condition": "eq",
              "keyValue": "={{ $json.restaurant_id }}"
            },
            {
              "keyName": "customer_phone",
              "condition": "eq",
              "keyValue": "={{ $json.customer_phone }}"
            },
            {
              "keyName": "status",
              "condition": "in",
              "keyValue": "pending,confirmed,pending_approval,seated"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [800, 240],
      "id": "get-active-reservations",
      "name": "📅 Get Reservas Activas",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "9pdl4V7ImejCLZWo",
          "name": "Supabase La-IA"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// ═══════════════════════════════════════════════════════════════\n// NODO: 📦 Preparar Contexto para VAPI (camelCase)\n// PROPÓSITO: Formato compatible con VAPI Tool Response\n// ═══════════════════════════════════════════════════════════════\n\nconst mergedData = $('🔗 Fusionar Cliente').first().json;\nconst reservations = $input.all().map(r => r.json);\nconst restaurant = mergedData.restaurant_data;\nconst settings = restaurant.settings || {};\n\nconsole.log('📦 Preparando contexto para VAPI (camelCase)');\nconsole.log('   Restaurante:', restaurant.name);\nconsole.log('   Cliente:', mergedData.customer_name);\nconsole.log('   Reservas activas:', reservations.length);\n\n// ═══════════════════════════════════════════════════════════════\n// 1. AGENT CONFIG\n// ═══════════════════════════════════════════════════════════════\nconst agentConfig = settings.agent || {};\nconst agentName = agentConfig.name || 'la asistente virtual';\nconst agentGender = agentConfig.gender || 'female';\n\n// ═══════════════════════════════════════════════════════════════\n// 2. HORARIOS\n// ═══════════════════════════════════════════════════════════════\nconst calendarSchedule = settings.calendar_schedule || [];\nconst dayNamesMap = {\n  'sunday': 'Dom', 'monday': 'Lun', 'tuesday': 'Mar',\n  'wednesday': 'Mié', 'thursday': 'Jue', 'friday': 'Vie', 'saturday': 'Sáb'\n};\n\nconst hoursSummary = calendarSchedule.length > 0\n  ? calendarSchedule.map(day => {\n      const dayName = dayNamesMap[day.day_of_week] || day.day_name || 'N/A';\n      return day.is_open ? `${dayName}: ${day.open_time}-${day.close_time}` : `${dayName}: CERRADO`;\n    }).join(', ')\n  : 'No configurado';\n\n// ═══════════════════════════════════════════════════════════════\n// 3. ZONAS (camelCase)\n// ═══════════════════════════════════════════════════════════════\nconst zonesConfig = settings.zones || {};\nconst availableZones = [];\n\nObject.entries(zonesConfig).forEach(([zoneKey, zoneData]) => {\n  if (zoneData && zoneData.enabled === true) {\n    availableZones.push({\n      id: zoneKey,\n      name: zoneData.display_name || zoneKey,\n      description: zoneData.description || '',\n      icon: zoneData.icon || '',\n      sortOrder: zoneData.sort_order || 99\n    });\n  }\n});\n\navailableZones.sort((a, b) => a.sortOrder - b.sortOrder);\nconst defaultZone = settings.default_zone || 'interior';\nconst zonesSummaryVoice = availableZones.length > 0\n  ? availableZones.map(z => `${z.icon} ${z.name}`).join(', ')\n  : 'interior';\n\n// ═══════════════════════════════════════════════════════════════\n// 4. POLÍTICAS (camelCase)\n// ═══════════════════════════════════════════════════════════════\nconst bookingSettings = settings.booking_settings || {};\nconst politicas = {\n  reservationDuration: settings.reservation_duration || 90,\n  slotDuration: settings.slot_interval || 30,\n  minAdvanceMinutes: settings.min_advance_minutes || 30,\n  advanceBookingDays: bookingSettings.advance_booking_days || 30,\n  maxPartySize: bookingSettings.max_party_size || 8,\n  cancellationPolicy: bookingSettings.cancellation_policy || '24h'\n};\n\n// ═══════════════════════════════════════════════════════════════\n// 5. RESERVAS ACTIVAS (camelCase)\n// ═══════════════════════════════════════════════════════════════\nconst activeReservations = reservations.map(r => ({\n  reservationId: r.id,\n  date: r.reservation_date,\n  time: r.reservation_time,\n  partySize: r.party_size,\n  zone: r.preferred_zone,\n  status: r.status,\n  specialRequests: r.special_requests || null\n}));\n\nlet reservationsSummary = '';\nif (activeReservations.length > 0) {\n  reservationsSummary = `ESTE CLIENTE TIENE ${activeReservations.length} RESERVA(S) ACTIVA(S): `;\n  activeReservations.forEach((r, i) => {\n    reservationsSummary += `Reserva ${i + 1}: ${r.date} a las ${r.time} para ${r.partySize} personas en ${r.zone || 'zona no especificada'}. `;\n  });\n  reservationsSummary += 'Si el cliente modifica, usa estos datos existentes.';\n} else {\n  reservationsSummary = 'Este cliente NO tiene reservas activas.';\n}\n\n// ═══════════════════════════════════════════════════════════════\n// 6. CONTEXTO FINAL (TODO camelCase)\n// ═══════════════════════════════════════════════════════════════\nconst context = {\n  restaurantId: mergedData.restaurant_id,\n  restaurantName: restaurant.name,\n  customerId: mergedData.customer_id,\n  customerName: mergedData.customer_name,\n  customerPhone: mergedData.customer_phone,\n  agentName: agentName,\n  agentGender: agentGender,\n  address: restaurant.address || '',\n  phone: restaurant.phone || '',\n  email: restaurant.email || '',\n  horarios: hoursSummary,\n  zonasDisponibles: availableZones,\n  zonaPorDefecto: defaultZone,\n  zonesSummary: zonesSummaryVoice,\n  politicas: politicas,\n  reservasActivas: activeReservations,\n  tieneReservasActivas: activeReservations.length > 0,\n  totalReservasActivas: activeReservations.length,\n  customerActiveReservationsSummary: reservationsSummary,\n  channel: 'voice',\n  callMetadata: mergedData.call_metadata,\n  timestamp: mergedData.call_metadata.timestamp\n};\n\nconsole.log('✅ Contexto camelCase preparado:');\nconsole.log('   - Agente:', agentName);\nconsole.log('   - Zonas:', availableZones.length);\nconsole.log('   - Reservas:', activeReservations.length);\n\nreturn context;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 240],
      "id": "prepare-context",
      "name": "📦 Preparar Contexto BAPI"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1200, 240],
      "id": "respond-to-bapi",
      "name": "✅ Responder a BAPI"
    }
  ],
  "connections": {
    "📞 Webhook BAPI": {
      "main": [[{"node": "📝 Normalizar Input BAPI", "type": "main", "index": 0}]]
    },
    "📝 Normalizar Input BAPI": {
      "main": [[{"node": "🔍 Get All Restaurants", "type": "main", "index": 0}]]
    },
    "🔍 Get All Restaurants": {
      "main": [[{"node": "🏪 Buscar Restaurante", "type": "main", "index": 0}]]
    },
    "🏪 Buscar Restaurante": {
      "main": [[{"node": "🔍 Buscar Cliente", "type": "main", "index": 0}]]
    },
    "🔍 Buscar Cliente": {
      "main": [[{"node": "❓ ¿Cliente Existe?", "type": "main", "index": 0}]]
    },
    "❓ ¿Cliente Existe?": {
      "main": [
        [{"node": "➕ Crear Cliente", "type": "main", "index": 0}],
        [{"node": "🔗 Fusionar Cliente", "type": "main", "index": 0}]
      ]
    },
    "➕ Crear Cliente": {
      "main": [[{"node": "🔗 Fusionar Cliente", "type": "main", "index": 0}]]
    },
    "🔗 Fusionar Cliente": {
      "main": [[{"node": "📅 Get Reservas Activas", "type": "main", "index": 0}]]
    },
    "📅 Get Reservas Activas": {
      "main": [[{"node": "📦 Preparar Contexto BAPI", "type": "main", "index": 0}]]
    },
    "📦 Preparar Contexto BAPI": {
      "main": [[{"node": "✅ Responder a BAPI", "type": "main", "index": 0}]]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "instanceId": "968c65341fc947850f62b4a42d249947219a244717952c0dbaf2b62952e73bd9"
  }
}

