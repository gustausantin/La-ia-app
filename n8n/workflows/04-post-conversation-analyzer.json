{
  "name": "04 - Post-Conversation Analyzer",
  "nodes": [
    {
      "parameters": {
        "inputSource": "jsonExample"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -832,
        112
      ],
      "id": "535c1e61-ae33-4387-883c-be0dfba737a6",
      "name": "▶️ Trigger desde Workflow 3"
    },
    {
      "parameters": {
        "jsCode": "// Validar input del workflow anterior\nconst input = $input.item.json;\n\nif (!input.conversation_id) {\n  throw new Error('❌ Missing conversation_id');\n}\n\nif (!input.restaurant_id) {\n  throw new Error('❌ Missing restaurant_id');\n}\n\nconsole.log('✅ Análisis iniciado:', {\n  conversation_id: input.conversation_id,\n  restaurant_id: input.restaurant_id\n});\n\nreturn {\n  conversation_id: input.conversation_id,\n  restaurant_id: input.restaurant_id\n};"
      },
      "id": "3387bbc4-20ad-4f28-b8c6-f24bf759f3c5",
      "name": "📋 Validar Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        112
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n  id,\n  conversation_id,\n  restaurant_id,\n  customer_id,\n  customer_name,\n  customer_phone,\n  source_channel,\n  interaction_type,\n  status,\n  outcome,\n  reservation_id,\n  created_at,\n  resolved_at,\n  sentiment,\n  metadata\nFROM agent_conversations\nWHERE id = '{{ $json.conversation_id }}'\n  AND restaurant_id = '{{ $json.restaurant_id }}'\nLIMIT 1;",
        "additionalFields": {}
      },
      "id": "14191400-41ab-4875-ab04-e60cb16c469f",
      "name": "📥 Cargar Conversación",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -480,
        112
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pzHHbcl0CY8b8WkI",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n  sender,\n  message_text,\n  timestamp,\n  direction\nFROM agent_messages\nWHERE conversation_id = '{{ $json.conversation_id }}'\nORDER BY timestamp ASC;",
        "additionalFields": {}
      },
      "id": "85f012d1-9725-4e93-ab32-c7f54014fa1e",
      "name": "💬 Cargar Mensajes",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -288,
        112
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pzHHbcl0CY8b8WkI",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Formatear historial de mensajes para el LLM\nconst messages = $input.all();\nconst conversationData = $('📥 Cargar Conversación').first().json;\n\nif (!messages || messages.length === 0) {\n  throw new Error('❌ No hay mensajes en esta conversación');\n}\n\n// Construir historial legible\nlet conversationHistory = '';\n\nmessages.forEach((msg) => {\n  const data = msg.json;\n  const sender = data.sender === 'customer' ? 'Cliente' : 'Agente';\n  const text = data.message_text || '';\n  \n  conversationHistory += `${sender}: ${text}\\n`;\n});\n\nconsole.log('✅ Historial construido:', {\n  total_messages: messages.length,\n  chars: conversationHistory.length\n});\n\nreturn {\n  conversation_id: conversationData.conversation_id,\n  restaurant_id: conversationData.restaurant_id,\n  customer_name: conversationData.customer_name,\n  customer_phone: conversationData.customer_phone,\n  interaction_type: conversationData.interaction_type,\n  source_channel: conversationData.source_channel,\n  conversation_history: conversationHistory,\n  message_count: messages.length\n};"
      },
      "id": "4f332b4e-4eae-421c-b9cb-ffd375209c31",
      "name": "📝 Formatear Historial",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -96,
        112
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.conversation_history }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Eres un analista experto de conversaciones de IA en restaurantes. Analiza el historial de mensajes y extrae insights estructurados.\n\n**CONTEXTO:**\n- interaction_type actual: {{ $json.interaction_type }}\n- Cliente: {{ $json.customer_name }}\n- Teléfono: {{ $json.customer_phone }}\n- Canal: {{ $json.source_channel }}\n- Total mensajes: {{ $json.message_count }}\n\n**TU TAREA:**\nAnaliza la conversación y devuelve un JSON con:\n\n1. **conversation_summary** (string, max 200 chars): Resumen conciso\n2. **outcome_detected** (enum): \"reservation_created\", \"reservation_modified\", \"reservation_cancelled\", \"inquiry_answered\", \"no_action\", \"escalated\"\n3. **sentiment_analysis** (enum): \"positive\", \"neutral\", \"negative\"\n4. **satisfaction_level** (enum): \"very_satisfied\", \"satisfied\", \"neutral\", \"unsatisfied\", \"very_unsatisfied\"\n5. **key_topics** (array): Temas principales [\"reserva\", \"cumpleaños\"]\n6. **tools_used** (array): Herramientas detectadas [\"check_availability\", \"create_reservation\"]\n7. **special_requests** (array): Peticiones especiales\n8. **escalation_needed** (boolean): ¿Necesitó escalamiento?\n9. **resolution_quality** (int 1-5): Calidad de resolución\n10. **notes** (string): Observaciones\n\n**REGLAS:**\n- Sé objetivo y preciso\n- Solo info del historial\n- No inventes datos\n- Si no está claro: \"neutral\" o []\n\n**FORMATO:**\nJSON válido con estos campos exactos."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.23,
      "position": [
        96,
        112
      ],
      "id": "57b2504a-e180-498c-a65f-7980e47c0f61",
      "name": "🧠 LLM Analyzer"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0.1,
          "maxTokens": 500
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        96,
        320
      ],
      "id": "cfac9431-aad6-491c-8e78-4616dbb0d05f",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "zwtmjTlXACMvkqZx",
          "name": "OpenAi La-IA"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "fromJson",
        "jsonSchema": "={\n  \"type\": \"object\",\n  \"properties\": {\n    \"conversation_summary\": {\"type\": \"string\"},\n    \"outcome_detected\": {\"type\": \"string\"},\n    \"sentiment_analysis\": {\"type\": \"string\"},\n    \"satisfaction_level\": {\"type\": \"string\"},\n    \"key_topics\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n    \"tools_used\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n    \"special_requests\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n    \"escalation_needed\": {\"type\": \"boolean\"},\n    \"resolution_quality\": {\"type\": \"integer\"},\n    \"notes\": {\"type\": \"string\"}\n  },\n  \"required\": [\"conversation_summary\", \"outcome_detected\", \"sentiment_analysis\", \"satisfaction_level\", \"key_topics\", \"tools_used\", \"special_requests\", \"escalation_needed\", \"resolution_quality\", \"notes\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        96,
        480
      ],
      "id": "8e3c9b4a-5f6d-4e1a-9c5e-7d2e3f4a5b6c",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "// Preparar datos para actualizar BD\nconst analysis = $input.item.json.output;\nconst conversationData = $('📝 Formatear Historial').first().json;\n\nconsole.log('✅ Análisis completado:', {\n  outcome: analysis.outcome_detected,\n  sentiment: analysis.sentiment_analysis,\n  satisfaction: analysis.satisfaction_level,\n  topics: analysis.key_topics?.length || 0\n});\n\nreturn {\n  conversation_id: conversationData.conversation_id,\n  restaurant_id: conversationData.restaurant_id,\n  outcome: analysis.outcome_detected,\n  sentiment: analysis.sentiment_analysis,\n  analysis: analysis,\n  analysis_completed: true,\n  analyzed_at: new Date().toISOString()\n};"
      },
      "id": "04d5fa41-d2bf-4eea-a171-84c3709edeeb",
      "name": "📊 Preparar Actualización",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        112
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE agent_conversations\nSET \n  outcome = '{{ $json.outcome }}',\n  sentiment = '{{ $json.sentiment }}',\n  metadata = jsonb_set(\n    jsonb_set(\n      COALESCE(metadata, '{}'::jsonb),\n      '{analysis}',\n      '{{ $json.analysis | json }}'::jsonb\n    ),\n    '{analysis_completed}',\n    'true'\n  ),\n  updated_at = NOW()\nWHERE id = '{{ $json.conversation_id }}'\n  AND restaurant_id = '{{ $json.restaurant_id }}';\n\nSELECT \n  id,\n  outcome,\n  sentiment,\n  metadata->>'analysis_completed' as analysis_completed\nFROM agent_conversations\nWHERE id = '{{ $json.conversation_id }}';",
        "additionalFields": {}
      },
      "id": "bfbc2dcf-b67d-4b1d-94eb-05bc3364f59e",
      "name": "💾 Actualizar BD",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        560,
        112
      ],
      "credentials": {
        "supabaseApi": {
          "id": "pzHHbcl0CY8b8WkI",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log final exitoso\nconst result = $input.item.json;\n\nconsole.log('✅ Conversación analizada y actualizada:', {\n  conversation_id: result.id,\n  outcome: result.outcome,\n  sentiment: result.sentiment,\n  analysis_completed: result.analysis_completed\n});\n\nreturn {\n  success: true,\n  conversation_id: result.id,\n  outcome: result.outcome,\n  sentiment: result.sentiment\n};"
      },
      "id": "ee33755b-e639-485f-b5d2-4a4fffeb4970",
      "name": "✅ Log Éxito",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        112
      ]
    }
  ],
  "connections": {
    "▶️ Trigger desde Workflow 3": {
      "main": [
        [
          {
            "node": "📋 Validar Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📋 Validar Input": {
      "main": [
        [
          {
            "node": "📥 Cargar Conversación",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📥 Cargar Conversación": {
      "main": [
        [
          {
            "node": "💬 Cargar Mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💬 Cargar Mensajes": {
      "main": [
        [
          {
            "node": "📝 Formatear Historial",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📝 Formatear Historial": {
      "main": [
        [
          {
            "node": "🧠 LLM Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🧠 LLM Analyzer": {
      "main": [
        [
          {
            "node": "📊 Preparar Actualización",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "🧠 LLM Analyzer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "🧠 LLM Analyzer",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "📊 Preparar Actualización": {
      "main": [
        [
          {
            "node": "💾 Actualizar BD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💾 Actualizar BD": {
      "main": [
        [
          {
            "node": "✅ Log Éxito",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-19T00:00:00.000Z",
  "versionId": "1",
  "meta": {
    "instanceId": "968c65341fc947850f62b4a42d249947219a244717952c0dbaf2b62952e73bd9"
  }
}

